#include "swantypes.h"
// #include "system/game_data.h"

typedef void *(*ABILITY_SETUP_FUNC)(int *);
typedef void *(*ABILITY_HANDLER_FUNC)();

typedef void *(*ITEM_SETUP_FUNC)(int *);
typedef void *(*ITEM_HANDLER_FUNC)();

typedef void *(*MOVE_SETUP_FUNC)(int *);
typedef void *(*MOVE_HANDLER_FUNC)();

typedef void *(*FIELD_SETUP_FUNC)(int *);
typedef void *(*FIELD_HANDLER_FUNC)();

STRUCT_DECLARE(BtlServerWk)
STRUCT_DECLARE(BtlClientWk)
STRUCT_DECLARE(GameData)
STRUCT_DECLARE(PlayerState)
STRUCT_DECLARE(PosPoke)
STRUCT_DECLARE(GFLFont)
STRUCT_DECLARE(TCBManagerEx)
STRUCT_DECLARE(ArcTool)
STRUCT_DECLARE(BtlvScd)
STRUCT_DECLARE(BtlvScu)
STRUCT_DECLARE(TCBManager)
STRUCT_DECLARE(PalAnm)
STRUCT_DECLARE(BtlvCore)

const int dword_2199900 = 0x2199900;

enum BtlSetupFlag
{
    BTL_SETUP_FLAG_FISHING = 0x1,
    BTL_SETUP_FLAG_ROAMING = 0x8,
    BTL_SETUP_FLAG_DOUBLE = 0x20,
    BTL_SETUP_FLAG_ALL_BOXES_FULL = 0x40,
    BTL_SETUP_FLAG_NO_AUTO_DEFEAT = 0x100,
    BTL_SETUP_FLAG_NPOKE = 0x2000,
    BTL_SETUP_FLAG_PHENOMENON = 0x4000,
    BTL_SETUP_FLAG_NO_CATCH_KYUREM = 0x10000,
};

enum TurnFlag
#ifdef __cplusplus
    : u32
#endif
{

    TURNFLAG_ACTIONSTART = 0x0,
    TURNFLAG_ACTIONDONE = 0x1,
    TURNFLAG_DAMAGED = 0x2,
    TURNFLAG_MOVEPROCDONE = 0x3,
    TURNFLAG_FLINCH = 0x4,
    // TURNFLAG_FOCUSPUNCHREADY = 0x5,
    TURNFLAG_MOVEFAILED = 0x5,
    // TURNFLAG_FOCUSPUNCHFAIL = 0x6,
    TURNFLAG_MOVEFAILEDLASTTURN = 0x6,
    TURNFLAG_PROTECT = 0x7,
    TURNFLAG_ITEMCONSUMED = 0x8,
    TURNFLAG_CANTUSEITEM = 0x9,
    TURNFLAG_COMBOMOVEREADY = 0xA,
    TURNFLAG_HIDEMOVEOFF = 0xB,
    TURNFLAG_MOVED = 0xC,
    TURNFLAG_TURNCHECKCONDITIONPASSED = 0xD,
    TURNFLAG_ACCURACYUP = 0xE,
    TURNFLAG_USINGFLING = 0xF,
};

enum MoveID
{
    MOVE_NULL = 0x0,
    MOVE001_CONCUSS = 0x1,
    MOVE002_KARATE_CHOP = 0x2,
    MOVE003_DOUBLE_SLAP = 0x3,
    MOVE004_COMET_PUNCH = 0x4,
    MOVE005_MEGA_PUNCH = 0x5,
    MOVE006_PAY_DAY = 0x6,
    MOVE007_FIRE_PUNCH = 0x7,
    MOVE008_ICE_PUNCH = 0x8,
    MOVE009_THUNDER_PUNCH = 0x9,
    MOVE010_SCRATCH = 0xA,
    MOVE011_DUAL_WINGBEAT = 0xB,
    MOVE012_GUILLOTINE = 0xC,
    MOVE013_RAZOR_WINDS = 0xD,
    MOVE014_SWORDS_DANCE = 0xE,
    MOVE015_CUT = 0xF,
    MOVE016_GUST = 0x10,
    MOVE017_WING_ATTACK = 0x11,
    MOVE018_WHIRLWIND = 0x12,
    MOVE019_FLY = 0x13,
    MOVE020_BIND = 0x14,
    MOVE021_BRUTAL_SWING = 0x15,
    MOVE022_VINE_WHIPS = 0x16,
    MOVE023_STOMP = 0x17,
    MOVE024_DOUBLE_KICK = 0x18,
    MOVE025_HIGH_HORSEPOWER = 0x19,
    MOVE026_JUMP_KICK = 0x1A,
    MOVE027_HEADLONG_RUSH = 0x1B,
    MOVE028_SAND_ATTACK = 0x1C,
    MOVE029_HEADBUTT = 0x1D,
    MOVE030_HORN_ATTACK = 0x1E,
    MOVE031_FIRE_LASH = 0x1F,
    MOVE032_HORN_DRILL = 0x20,
    MOVE033_TACKLE = 0x21,
    MOVE034_BODY_SLAM = 0x22,
    MOVE035_WRAP = 0x23,
    MOVE036_TAKE_DOWN = 0x24,
    MOVE037_THRASH = 0x25,
    MOVE038_DOUBLE_EDGE = 0x26,
    MOVE039_TAIL_WHIP = 0x27,
    MOVE040_POISON_STING = 0x28,
    MOVE041_TWINEEDLE = 0x29,
    MOVE042_PIN_MISSILE = 0x2A,
    MOVE043_LEER = 0x2B,
    MOVE044_BITE = 0x2C,
    MOVE045_GROWL = 0x2D,
    MOVE046_ROAR = 0x2E,
    MOVE047_SING = 0x2F,
    MOVE048_SUPERSONIC = 0x30,
    MOVE049_SCORCHING_SWARM = 0x31,
    MOVE050_DISABLE = 0x32,
    MOVE051_PARABOLIC_ZAP = 0x33,
    MOVE052_EMBER = 0x34,
    MOVE053_FLAMETHROWER = 0x35,
    MOVE054_MIST = 0x36,
    MOVE055_WATER_GUN = 0x37,
    MOVE056_HYDRO_PUMP = 0x38,
    MOVE057_SURF = 0x39,
    MOVE058_ICE_BEAM = 0x3A,
    MOVE059_BLIZZARD = 0x3B,
    MOVE060_PSYBEAM = 0x3C,
    MOVE061_BUBBLE_BEAM = 0x3D,
    MOVE062_AURORA_BEAM = 0x3E,
    MOVE063_HYPER_BEAM = 0x3F,
    MOVE064_PECK = 0x40,
    MOVE065_DRILL_PECK = 0x41,
    MOVE066_SUBMISSION = 0x42,
    MOVE067_LOW_KICK = 0x43,
    MOVE068_COUNTER = 0x44,
    MOVE069_SEISMIC_TOSS = 0x45,
    MOVE070_STRENGTH = 0x46,
    MOVE071_ABSORB = 0x47,
    MOVE072_MEGA_DRAIN = 0x48,
    MOVE073_LEECH_SEED = 0x49,
    MOVE074_GROWTH = 0x4A,
    MOVE075_RAZOR_LEAF = 0x4B,
    MOVE076_SOLAR_BEAM = 0x4C,
    MOVE077_POISON_POWDER = 0x4D,
    MOVE078_STUN_SPORE = 0x4E,
    MOVE079_SLEEP_POWDER = 0x4F,
    MOVE080_PETAL_DANCE = 0x50,
    MOVE081_STRING_SHOT = 0x51,
    MOVE082_DRAGON_RAGE = 0x52,
    MOVE083_FIRE_SPIN = 0x53,
    MOVE084_THUNDER_SHOCK = 0x54,
    MOVE085_THUNDERBOLT = 0x55,
    MOVE086_THUNDER_WAVE = 0x56,
    MOVE087_THUNDER = 0x57,
    MOVE088_ROCK_THROW = 0x58,
    MOVE089_EARTHQUAKE = 0x59,
    MOVE090_FISSURE = 0x5A,
    MOVE091_DIG = 0x5B,
    MOVE092_TOXIC = 0x5C,
    MOVE093_CONFUSION = 0x5D,
    MOVE094_PSYCHIC = 0x5E,
    MOVE095_HYPNOSIS = 0x5F,
    MOVE096_MEDITATE = 0x60,
    MOVE097_AGILITY = 0x61,
    MOVE098_QUICK_ATTACK = 0x62,
    MOVE099_RAGE = 0x63,
    MOVE100_TELEPORT = 0x64,
    MOVE101_NIGHT_SHADE = 0x65,
    MOVE102_PSYCHIC_NOISE = 0x66,
    MOVE103_SCREECH = 0x67,
    MOVE104_DOUBLE_TEAM = 0x68,
    MOVE105_RECOVER = 0x69,
    MOVE106_HARDEN = 0x6A,
    MOVE107_MINIMIZE = 0x6B,
    MOVE108_SMOKESCREEN = 0x6C,
    MOVE109_CONFUSE_RAY = 0x6D,
    MOVE110_BREAKING_SWIPE = 0x6E,
    MOVE111_DEFENSE_CURL = 0x6F,
    MOVE112_BARRIER = 0x70,
    MOVE113_LIGHT_SCREEN = 0x71,
    MOVE114_HAZE = 0x72,
    MOVE115_REFLECT = 0x73,
    MOVE116_FOCUS_ENERGY = 0x74,
    MOVE117_HIDDEN_FORCE = 0x75,
    MOVE118_METRONOME = 0x76,
    MOVE119_MIRROR_MOVE = 0x77,
    MOVE120_SELF_DESTRUCT = 0x78,
    MOVE121_EGG_BOMB = 0x79,
    MOVE122_LICK = 0x7A,
    MOVE123_SMOG = 0x7B,
    MOVE124_SLUDGE = 0x7C,
    MOVE125_BONE_CLUB = 0x7D,
    MOVE126_FIRE_BLAST = 0x7E,
    MOVE127_WATERFALL = 0x7F,
    MOVE128_CLAMP = 0x80,
    MOVE129_SWIFT = 0x81,
    MOVE130_SKULL_BASH = 0x82,
    MOVE131_SPIKE_CANNON = 0x83,
    MOVE132_INFESTATION = 0x84,
    MOVE133_AMNESIA = 0x85,
    MOVE134_LUNGE = 0x86,
    MOVE135_SOFT_BOILED = 0x87,
    MOVE136_HIGH_JUMP_KICK = 0x88,
    MOVE137_GLARE = 0x89,
    MOVE138_DREAM_EATER = 0x8A,
    MOVE139_POISON_GAS = 0x8B,
    MOVE140_BARRAGE = 0x8C,
    MOVE141_LEECH_LIFE = 0x8D,
    MOVE142_LOVELY_KISS = 0x8E,
    MOVE143_SKY_ATTACK = 0x8F,
    MOVE144_PHANTOM_STRIKE = 0x90,
    MOVE145_CHILLING_WATER = 0x91,
    MOVE146_DIZZY_PUNCH = 0x92,
    MOVE147_SPORE = 0x93,
    MOVE148_SPARKLE = 0x94,
    MOVE149_PSYWAVE = 0x95,
    MOVE150_PLAY_ROUGH = 0x96,
    MOVE151_ACID_ARMOR = 0x97,
    MOVE152_CRABHAMMER = 0x98,
    MOVE153_EXPLOSION = 0x99,
    MOVE154_FURY_SWIPES = 0x9A,
    MOVE155_BONEMERANG = 0x9B,
    MOVE156_REST = 0x9C,
    MOVE157_ROCK_SLIDE = 0x9D,
    MOVE158_HYPER_FANG = 0x9E,
    MOVE159_NUZZLE = 0x9F,
    MOVE160_FLIP_TURN = 0xA0,
    MOVE161_TRI_ATTACK = 0xA1,
    MOVE162_SUPER_FANG = 0xA2,
    MOVE163_SLASH = 0xA3,
    MOVE164_SUBSTITUTE = 0xA4,
    MOVE165_STRUGGLE = 0xA5,
    MOVE166_SKETCH = 0xA6,
    MOVE167_TRIPLE_KICK = 0xA7,
    MOVE168_THIEF = 0xA8,
    MOVE169_INFERNAL_PARADE = 0xA9,
    MOVE170_SNAP_TRAP = 0xAA,
    MOVE171_NIGHTMARE = 0xAB,
    MOVE172_FLAME_WHEEL = 0xAC,
    MOVE173_SNORE = 0xAD,
    MOVE174_CURSE = 0xAE,
    MOVE175_FLAIL = 0xAF,
    MOVE176_SPIN_OUT = 0xB0,
    MOVE177_AEROBLAST = 0xB1,
    MOVE178_COTTON_SPORE = 0xB2,
    MOVE179_REVERSAL = 0xB3,
    MOVE180_DIAMOND_STORM = 0xB4,
    MOVE181_POWDER_SNOW = 0xB5,
    MOVE182_PROTECT = 0xB6,
    MOVE183_MACH_PUNCH = 0xB7,
    MOVE184_SCARY_FACE = 0xB8,
    MOVE185_FEINT_ATTACK = 0xB9,
    MOVE186_DRAINING_KISS = 0xBA,
    MOVE187_BELLY_DRUM = 0xBB,
    MOVE188_SLUDGE_BOMB = 0xBC,
    MOVE189_MUD_SLAP = 0xBD,
    MOVE190_OCTAZOOKA = 0xBE,
    MOVE191_SPIKES = 0xBF,
    MOVE192_ZAP_CANNON = 0xC0,
    MOVE193_ELECTRO_SHOT = 0xC1,
    MOVE194_DESTINY_BOND = 0xC2,
    MOVE195_PERISH_SONG = 0xC3,
    MOVE196_ICY_WIND = 0xC4,
    MOVE197_DETECT = 0xC5,
    MOVE198_BONE_RUSH = 0xC6,
    MOVE199_PARTING_SHOT = 0xC7,
    MOVE200_OUTRAGE = 0xC8,
    MOVE201_SANDSTORM = 0xC9,
    MOVE202_GIGA_DRAIN = 0xCA,
    MOVE203_ENDURE = 0xCB,
    MOVE204_CHARM = 0xCC,
    MOVE205_ACCELROCK = 0xCD,
    MOVE206_BODY_PRESS = 0xCE,
    MOVE207_SWAGGER = 0xCF,
    MOVE208_MILK_DRINK = 0xD0,
    MOVE209_SPARK = 0xD1,
    MOVE210_FURY_CUTTER = 0xD2,
    MOVE211_STEEL_WING = 0xD3,
    MOVE212_MEAN_LOOK = 0xD4,
    MOVE213_ATTRACT = 0xD5,
    MOVE214_SLEEP_TALK = 0xD6,
    MOVE215_HEAL_BELL = 0xD7,
    MOVE216_RETURN = 0xD8,
    MOVE217_PRESENT = 0xD9,
    MOVE218_TEMPER_FLARE = 0xDA,
    MOVE219_SAFEGUARD = 0xDB,
    MOVE220_SEETHING_COLD = 0xDC,
    MOVE221_MYSTICAL_FIRE = 0xDD,
    MOVE222_STICKY_WEB = 0xDE,
    MOVE223_DYNAMIC_PUNCH = 0xDF,
    MOVE224_MEGAHORN = 0xE0,
    MOVE225_DRAGON_BREATH = 0xE1,
    MOVE226_BATON_PASS = 0xE2,
    MOVE227_ENCORE = 0xE3,
    MOVE228_PURSUIT = 0xE4,
    MOVE229_RAPID_SPIN = 0xE5,
    MOVE230_SWEET_SCENT = 0xE6,
    MOVE231_IRON_TAIL = 0xE7,
    MOVE232_METAL_CLAW = 0xE8,
    MOVE233_VITAL_THROW = 0xE9,
    MOVE234_MORNING_SUN = 0xEA,
    MOVE235_SYNTHESIS = 0xEB,
    MOVE236_MOONLIGHT = 0xEC,
    MOVE237_HIDDEN_POWER = 0xED,
    MOVE238_CROSS_CHOP = 0xEE,
    MOVE239_TWISTER = 0xEF,
    MOVE240_RAIN_DANCE = 0xF0,
    MOVE241_SUNNY_DAY = 0xF1,
    MOVE242_CRUNCH = 0xF2,
    MOVE243_MIRROR_COAT = 0xF3,
    MOVE244_BITTER_MALICE = 0xF4,
    MOVE245_EXTREME_SPEED = 0xF5,
    MOVE246_ANCIENT_POWER = 0xF6,
    MOVE247_SHADOW_BALL = 0xF7,
    MOVE248_FUTURE_SIGHT = 0xF8,
    MOVE249_ROCK_SMASH = 0xF9,
    MOVE250_WHIRLPOOL = 0xFA,
    MOVE251_BEAT_UP = 0xFB,
    MOVE252_FAKE_OUT = 0xFC,
    MOVE253_UPROAR = 0xFD,
    MOVE254_STOCKPILE = 0xFE,
    MOVE255_SPIT_UP = 0xFF,
    MOVE256_SWALLOW = 0x100,
    MOVE257_HEAT_WAVE = 0x101,
    MOVE258_HAIL = 0x102,
    MOVE259_TORMENT = 0x103,
    MOVE260_FLATTER = 0x104,
    MOVE261_WILL_O_WISP = 0x105,
    MOVE262_OBSTRUCT = 0x106,
    MOVE263_FACADE = 0x107,
    MOVE264_FOCUS_PUNCH = 0x108,
    MOVE265_PSYCHIC_FANGS = 0x109,
    MOVE266_FOLLOW_ME = 0x10A,
    MOVE267_NATURE_POWER = 0x10B,
    MOVE268_CHARGE = 0x10C,
    MOVE269_TAUNT = 0x10D,
    MOVE270_HELPING_HAND = 0x10E,
    MOVE271_WEATHER_CRASH = 0x10F,
    MOVE272_BARB_BARRAGE = 0x110,
    MOVE273_WISH = 0x111,
    MOVE274_ASSIST = 0x112,
    MOVE275_INGRAIN = 0x113,
    MOVE276_SUPERPOWER = 0x114,
    MOVE277_MAGIC_COAT = 0x115,
    MOVE278_RECYCLE = 0x116,
    MOVE279_REVENGE = 0x117,
    MOVE280_BRICK_BREAK = 0x118,
    MOVE281_YAWN = 0x119,
    MOVE282_KNOCK_OFF = 0x11A,
    MOVE283_ENDEAVOR = 0x11B,
    MOVE284_ERUPTION = 0x11C,
    MOVE285_SKILL_SWAP = 0x11D,
    MOVE286_IMPRISON = 0x11E,
    MOVE287_REFRESH = 0x11F,
    MOVE288_GRUDGE = 0x120,
    MOVE289_VICTORY_DANCE = 0x121,
    MOVE290_SECRET_POWER = 0x122,
    MOVE291_DIVE = 0x123,
    MOVE292_ARM_THRUST = 0x124,
    MOVE293_TROP_KICK = 0x125,
    MOVE294_TAIL_GLOW = 0x126,
    MOVE295_DAZZLING_GLEAM = 0x127,
    MOVE296_MOONBLAST = 0x128,
    MOVE297_FEATHER_DANCE = 0x129,
    MOVE298_TEETER_DANCE = 0x12A,
    MOVE299_BLAZE_KICK = 0x12B,
    MOVE300_ESPER_WING = 0x12C,
    MOVE301_BOOMBURST = 0x12D,
    MOVE302_NEEDLE_ARM = 0x12E,
    MOVE303_SLACK_OFF = 0x12F,
    MOVE304_HYPER_VOICE = 0x130,
    MOVE305_POISON_FANG = 0x131,
    MOVE306_CRUSH_CLAW = 0x132,
    MOVE307_BLAST_BURN = 0x133,
    MOVE308_HYDRO_CANNON = 0x134,
    MOVE309_METEOR_MASH = 0x135,
    MOVE310_ASTONISH = 0x136,
    MOVE311_WEATHER_BALL = 0x137,
    MOVE312_AROMATHERAPY = 0x138,
    MOVE313_FAKE_TEARS = 0x139,
    MOVE314_AIR_CUTTER = 0x13A,
    MOVE315_OVERHEAT = 0x13B,
    MOVE316_EERIE_IMPULSE = 0x13C,
    MOVE317_ROCK_TOMB = 0x13D,
    MOVE318_SILVER_WIND = 0x13E,
    MOVE319_METAL_SOUND = 0x13F,
    MOVE320_GRASS_WHISTLE = 0x140,
    MOVE321_TICKLE = 0x141,
    MOVE322_COSMIC_POWER = 0x142,
    MOVE323_WATER_SPOUT = 0x143,
    MOVE324_SIGNAL_BEAM = 0x144,
    MOVE325_SHADOW_PUNCH = 0x145,
    MOVE326_EXTRASENSORY = 0x146,
    MOVE327_SKY_UPPERCUT = 0x147,
    MOVE328_SAND_TOMB = 0x148,
    MOVE329_SHEER_COLD = 0x149,
    MOVE330_MUDDY_WATER = 0x14A,
    MOVE331_BULLET_SEED = 0x14B,
    MOVE332_AERIAL_ACE = 0x14C,
    MOVE333_ICICLE_SPEAR = 0x14D,
    MOVE334_IRON_DEFENSE = 0x14E,
    MOVE335_BLOCK = 0x14F,
    MOVE336_HOWL = 0x150,
    MOVE337_DRAGON_CLAW = 0x151,
    MOVE338_FRENZY_PLANT = 0x152,
    MOVE339_BULK_UP = 0x153,
    MOVE340_BOUNCE = 0x154,
    MOVE341_MUD_SHOT = 0x155,
    MOVE342_POISON_TAIL = 0x156,
    MOVE343_COVET = 0x157,
    MOVE344_VOLT_TACKLE = 0x158,
    MOVE345_MAGICAL_LEAF = 0x159,
    MOVE346_WICKED_BLOW = 0x15A,
    MOVE347_CALM_MIND = 0x15B,
    MOVE348_LEAF_BLADE = 0x15C,
    MOVE349_DRAGON_DANCE = 0x15D,
    MOVE350_ROCK_BLAST = 0x15E,
    MOVE351_SHOCK_WAVE = 0x15F,
    MOVE352_WATER_PULSE = 0x160,
    MOVE353_DOOM_DESIRE = 0x161,
    MOVE354_PSYCHO_BOOST = 0x162,
    MOVE355_ROOST = 0x163,
    MOVE356_GRAVITY = 0x164,
    MOVE357_FREEZE_DRY = 0x165,
    MOVE358_WAKE_UP_SLAP = 0x166,
    MOVE359_HAMMER_ARM = 0x167,
    MOVE360_GYRO_BALL = 0x168,
    MOVE361_HEALING_WISH = 0x169,
    MOVE362_BRINE = 0x16A,
    MOVE363_NATURAL_GIFT = 0x16B,
    MOVE364_CONFIDE = 0x16C,
    MOVE365_PLUCK = 0x16D,
    MOVE366_TAILWIND = 0x16E,
    MOVE367_ACUPRESSURE = 0x16F,
    MOVE368_METAL_BURST = 0x170,
    MOVE369_U_TURN = 0x171,
    MOVE370_CLOSE_COMBAT = 0x172,
    MOVE371_PAYBACK = 0x173,
    MOVE372_ASSURANCE = 0x174,
    MOVE373_1ST_IMPRESSION = 0x175,
    MOVE374_FLING = 0x176,
    MOVE375_PSYCHO_SHIFT = 0x177,
    MOVE376_SPIKY_SHIELD = 0x178,
    MOVE377_ALLURING_VOICE = 0x179,
    MOVE378_SCALE_SHOT = 0x17A,
    MOVE379_PETAL_BLIZZARD = 0x17B,
    MOVE380_GASTRO_ACID = 0x17C,
    MOVE381_LUCKY_CHANT = 0x17D,
    MOVE382_ME_FIRST = 0x17E,
    MOVE383_COPYCAT = 0x17F,
    MOVE384_PSYBLADE = 0x180,
    MOVE385_CLANGING_SCALES = 0x181,
    MOVE386_WAVE_CRASH = 0x182,
    MOVE387_LAST_RESORT = 0x183,
    MOVE388_WORRY_SEED = 0x184,
    MOVE389_SUCKER_PUNCH = 0x185,
    MOVE390_TOXIC_SPIKES = 0x186,
    MOVE391_HEART_SWAP = 0x187,
    MOVE392_AQUA_RING = 0x188,
    MOVE393_MAGNET_RISE = 0x189,
    MOVE394_FLARE_BLITZ = 0x18A,
    MOVE395_FORCE_PALM = 0x18B,
    MOVE396_AURA_SPHERE = 0x18C,
    MOVE397_ROCK_POLISH = 0x18D,
    MOVE398_POISON_JAB = 0x18E,
    MOVE399_DARK_PULSE = 0x18F,
    MOVE400_NIGHT_SLASH = 0x190,
    MOVE401_AQUA_TAIL = 0x191,
    MOVE402_SEED_BOMB = 0x192,
    MOVE403_AIR_SLASH = 0x193,
    MOVE404_X_SCISSOR = 0x194,
    MOVE405_BUG_BUZZ = 0x195,
    MOVE406_DRAGON_PULSE = 0x196,
    MOVE407_DRAGON_RUSH = 0x197,
    MOVE408_POWER_GEM = 0x198,
    MOVE409_DRAIN_PUNCH = 0x199,
    MOVE410_VACUUM_WAVE = 0x19A,
    MOVE411_FOCUS_BLAST = 0x19B,
    MOVE412_ENERGY_BALL = 0x19C,
    MOVE413_BRAVE_BIRD = 0x19D,
    MOVE414_EARTH_POWER = 0x19E,
    MOVE415_SWITCHEROO = 0x19F,
    MOVE416_GIGA_IMPACT = 0x1A0,
    MOVE417_NASTY_PLOT = 0x1A1,
    MOVE418_BULLET_PUNCH = 0x1A2,
    MOVE419_AVALANCHE = 0x1A3,
    MOVE420_ICE_SHARD = 0x1A4,
    MOVE421_SHADOW_CLAW = 0x1A5,
    MOVE422_THUNDER_FANG = 0x1A6,
    MOVE423_ICE_FANG = 0x1A7,
    MOVE424_FIRE_FANG = 0x1A8,
    MOVE425_SHADOW_SNEAK = 0x1A9,
    MOVE426_MUD_BOMB = 0x1AA,
    MOVE427_PSYCHO_CUT = 0x1AB,
    MOVE428_ZEN_HEADBUTT = 0x1AC,
    MOVE429_MIRROR_SHOT = 0x1AD,
    MOVE430_FLASH_CANNON = 0x1AE,
    MOVE431_ROCK_CLIMB = 0x1AF,
    MOVE432_DEFOG = 0x1B0,
    MOVE433_TRICK_ROOM = 0x1B1,
    MOVE434_DRACO_METEOR = 0x1B2,
    MOVE435_DISCHARGE = 0x1B3,
    MOVE436_LAVA_PLUME = 0x1B4,
    MOVE437_LEAF_STORM = 0x1B5,
    MOVE438_POWER_WHIP = 0x1B6,
    MOVE439_ROCK_WRECKER = 0x1B7,
    MOVE440_CROSS_POISON = 0x1B8,
    MOVE441_GUNK_SHOT = 0x1B9,
    MOVE442_IRON_HEAD = 0x1BA,
    MOVE443_MAGNET_BOMB = 0x1BB,
    MOVE444_STONE_EDGE = 0x1BC,
    MOVE445_CAPTIVATE = 0x1BD,
    MOVE446_STEALTH_ROCK = 0x1BE,
    MOVE447_GRASS_KNOT = 0x1BF,
    MOVE448_CHATTER = 0x1C0,
    MOVE449_SPIRIT_BREAK = 0x1C1,
    MOVE450_BUG_BITE = 0x1C2,
    MOVE451_CHARGE_BEAM = 0x1C3,
    MOVE452_WOOD_HAMMER = 0x1C4,
    MOVE453_AQUA_JET = 0x1C5,
    MOVE454_ATTACK_ORDER = 0x1C6,
    MOVE455_DEFEND_ORDER = 0x1C7,
    MOVE456_HEAL_ORDER = 0x1C8,
    MOVE457_HEAD_SMASH = 0x1C9,
    MOVE458_DOUBLE_HIT = 0x1CA,
    MOVE459_STARBURST = 0x1CB,
    MOVE460_STEEL_BEAM = 0x1CC,
    MOVE461_POLLEN_PUFF = 0x1CD,
    MOVE462_SILK_TRAP = 0x1CE,
    MOVE463_MAGMA_STORM = 0x1CF,
    MOVE464_DARK_VOID = 0x1D0,
    MOVE465_SEED_FLARE = 0x1D1,
    MOVE466_OMINOUS_WIND = 0x1D2,
    MOVE467_SHADOW_FORCE = 0x1D3,
    MOVE468_HONE_CLAWS = 0x1D4,
    MOVE469_WIDE_GUARD = 0x1D5,
    MOVE470_TRIPLE_AXEL = 0x1D6,
    MOVE471_TRIPLE_DIVE = 0x1D7,
    MOVE472_LIQUIDATION = 0x1D8,
    MOVE473_PSYSHOCK = 0x1D9,
    MOVE474_VENOSHOCK = 0x1DA,
    MOVE475_AUTOTOMIZE = 0x1DB,
    MOVE476_RAGE_POWDER = 0x1DC,
    MOVE477_TELEKINESIS = 0x1DD,
    MOVE478_POWER_TRIP = 0x1DE,
    MOVE479_SMACK_DOWN = 0x1DF,
    MOVE480_STORM_THROW = 0x1E0,
    MOVE481_FLAME_BURST = 0x1E1,
    MOVE482_SLUDGE_WAVE = 0x1E2,
    MOVE483_QUIVER_DANCE = 0x1E3,
    MOVE484_HEAVY_SLAM = 0x1E4,
    MOVE485_SCORCHING_SANDS = 0x1E5,
    MOVE486_ELECTRO_BALL = 0x1E6,
    MOVE487_SOAK = 0x1E7,
    MOVE488_FLAME_CHARGE = 0x1E8,
    MOVE489_COIL = 0x1E9,
    MOVE490_LOW_SWEEP = 0x1EA,
    MOVE491_ACID_SPRAY = 0x1EB,
    MOVE492_FOUL_PLAY = 0x1EC,
    MOVE493_STOMPIN_TANTRUM = 0x1ED,
    MOVE494_ENTRAINMENT = 0x1EE,
    MOVE495_ICE_HAMMER = 0x1EF,
    MOVE496_DISARMING_VOICE = 0x1F0,
    MOVE497_ECHOED_VOICE = 0x1F1,
    MOVE498_CHIP_AWAY = 0x1F2,
    MOVE499_CLEAR_SMOG = 0x1F3,
    MOVE500_STORED_POWER = 0x1F4,
    MOVE501_QUICK_GUARD = 0x1F5,
    MOVE502_ALLY_SWITCH = 0x1F6,
    MOVE503_SCALD = 0x1F7,
    MOVE504_SHELL_SMASH = 0x1F8,
    MOVE505_HEAL_PULSE = 0x1F9,
    MOVE506_HEX = 0x1FA,
    MOVE507_SKY_DROP = 0x1FB,
    MOVE508_SHIFT_GEAR = 0x1FC,
    MOVE509_CIRCLE_THROW = 0x1FD,
    MOVE510_INCINERATE = 0x1FE,
    MOVE511_FAIRY_WIND = 0x1FF,
    MOVE512_ACROBATICS = 0x200,
    MOVE513_REFLECT_TYPE = 0x201,
    MOVE514_RETALIATE = 0x202,
    MOVE515_FINAL_GAMBIT = 0x203,
    MOVE516_BESTOW = 0x204,
    MOVE517_INFERNO = 0x205,
    MOVE518_WATER_PLEDGE = 0x206,
    MOVE519_FIRE_PLEDGE = 0x207,
    MOVE520_GRASS_PLEDGE = 0x208,
    MOVE521_VOLT_SWITCH = 0x209,
    MOVE522_STRUGGLE_BUG = 0x20A,
    MOVE523_BULLDOZE = 0x20B,
    MOVE524_FROST_BREATH = 0x20C,
    MOVE525_DRAGON_TAIL = 0x20D,
    MOVE526_WORK_UP = 0x20E,
    MOVE527_ELECTROWEB = 0x20F,
    MOVE528_WILD_CHARGE = 0x210,
    MOVE529_DRILL_RUN = 0x211,
    MOVE530_DUAL_CHOP = 0x212,
    MOVE531_HEART_STAMP = 0x213,
    MOVE532_HORN_LEECH = 0x214,
    MOVE533_SACRED_SWORD = 0x215,
    MOVE534_RAZOR_SHELL = 0x216,
    MOVE535_HEAT_CRASH = 0x217,
    MOVE536_LEAF_TORNADO = 0x218,
    MOVE537_STEAMROLLER = 0x219,
    MOVE538_COTTON_GUARD = 0x21A,
    MOVE539_NIGHT_DAZE = 0x21B,
    MOVE540_PSYSTRIKE = 0x21C,
    MOVE541_TAIL_SLAP = 0x21D,
    MOVE542_HURRICANE = 0x21E,
    MOVE543_HEAD_CHARGE = 0x21F,
    MOVE544_GEAR_GRIND = 0x220,
    MOVE545_SEARING_SHOT = 0x221,
    MOVE546_TECHNO_BLAST = 0x222,
    MOVE547_RELIC_SONG = 0x223,
    MOVE548_SECRET_SWORD = 0x224,
    MOVE549_GLACIATE = 0x225,
    MOVE550_ZING_ZAP = 0x226,
    MOVE551_BLUE_FLARE = 0x227,
    MOVE552_FIERY_DANCE = 0x228,
    MOVE553_METEOR_BEAM = 0x229,
    MOVE554_SOLAR_BLADE = 0x22A,
    MOVE555_SNARL = 0x22B,
    MOVE556_ICICLE_CRASH = 0x22C,
    MOVE557_V_CREATE = 0x22D,
    MOVE558_SKITTER_SMACK = 0x22E,
    MOVE559_BANEFUL_BUNKER = 0x22F,
    MOVE560_FLYING_PRESS = 0x230,
};

enum Counter : unsigned __int8
{
    COUNTER_STOCKPILE = 0x0,
    COUNTER_STOCKPILE_DEF = 0x1,
    COUNTER_STOCKPILE_SPDEF = 0x2,
    COUNTER_PROTECT = 0x3,
    COUNTER_SKYDROP = 0x4,
};

enum MonsNo
{
    PK_NULL = 0x0,
    PK001_BULBASAUR = 0x1,
    PK002_IVYSAUR = 0x2,
    PK003_VENUSAUR = 0x3,
    PK004_CHARMANDER = 0x4,
    PK005_CHARMELEON = 0x5,
    PK006_CHARIZARD = 0x6,
    PK007_SQUIRTLE = 0x7,
    PK008_WARTORTLE = 0x8,
    PK009_BLASTOISE = 0x9,
    PK010_CATERPIE = 0xA,
    PK011_METAPOD = 0xB,
    PK012_BUTTERFREE = 0xC,
    PK013_WEEDLE = 0xD,
    PK014_KAKUNA = 0xE,
    PK015_BEEDRILL = 0xF,
    PK016_PIDGEY = 0x10,
    PK017_PIDGEOTTO = 0x11,
    PK018_PIDGEOT = 0x12,
    PK019_RATTATA = 0x13,
    PK020_RATICATE = 0x14,
    PK021_SPEAROW = 0x15,
    PK022_FEAROW = 0x16,
    PK023_EKANS = 0x17,
    PK024_ARBOK = 0x18,
    PK025_PIKACHU = 0x19,
    PK026_RAICHU = 0x1A,
    PK027_SANDSHREW = 0x1B,
    PK028_SANDSLASH = 0x1C,
    PK029_NIDORAN = 0x1D,
    PK030_NIDORINA = 0x1E,
    PK031_NIDOQUEEN = 0x1F,
    PK032_NIDORAN = 0x20,
    PK033_NIDORINO = 0x21,
    PK034_NIDOKING = 0x22,
    PK035_CLEFAIRY = 0x23,
    PK036_CLEFABLE = 0x24,
    PK037_VULPIX = 0x25,
    PK038_NINETALES = 0x26,
    PK039_JIGGLYPUFF = 0x27,
    PK040_WIGGLYTUFF = 0x28,
    PK041_ZUBAT = 0x29,
    PK042_GOLBAT = 0x2A,
    PK043_ODDISH = 0x2B,
    PK044_GLOOM = 0x2C,
    PK045_VILEPLUME = 0x2D,
    PK046_PARAS = 0x2E,
    PK047_PARASECT = 0x2F,
    PK048_VENONAT = 0x30,
    PK049_VENOMOTH = 0x31,
    PK050_DIGLETT = 0x32,
    PK051_DUGTRIO = 0x33,
    PK052_MEOWTH = 0x34,
    PK053_PERSIAN = 0x35,
    PK054_PSYDUCK = 0x36,
    PK055_GOLDUCK = 0x37,
    PK056_MANKEY = 0x38,
    PK057_PRIMEAPE = 0x39,
    PK058_GROWLITHE = 0x3A,
    PK059_ARCANINE = 0x3B,
    PK060_POLIWAG = 0x3C,
    PK061_POLIWHIRL = 0x3D,
    PK062_POLIWRATH = 0x3E,
    PK063_ABRA = 0x3F,
    PK064_KADABRA = 0x40,
    PK065_ALAKAZAM = 0x41,
    PK066_MACHOP = 0x42,
    PK067_MACHOKE = 0x43,
    PK068_MACHAMP = 0x44,
    PK069_BELLSPROUT = 0x45,
    PK070_WEEPINBELL = 0x46,
    PK071_VICTREEBEL = 0x47,
    PK072_TENTACOOL = 0x48,
    PK073_TENTACRUEL = 0x49,
    PK074_GEODUDE = 0x4A,
    PK075_GRAVELER = 0x4B,
    PK076_GOLEM = 0x4C,
    PK077_PONYTA = 0x4D,
    PK078_RAPIDASH = 0x4E,
    PK079_SLOWPOKE = 0x4F,
    PK080_SLOWBRO = 0x50,
    PK081_MAGNEMITE = 0x51,
    PK082_MAGNETON = 0x52,
    PK083_FARFETCH_D = 0x53,
    PK084_DODUO = 0x54,
    PK085_DODRIO = 0x55,
    PK086_SEEL = 0x56,
    PK087_DEWGONG = 0x57,
    PK088_GRIMER = 0x58,
    PK089_MUK = 0x59,
    PK090_SHELLDER = 0x5A,
    PK091_CLOYSTER = 0x5B,
    PK092_GASTLY = 0x5C,
    PK093_HAUNTER = 0x5D,
    PK094_GENGAR = 0x5E,
    PK095_ONIX = 0x5F,
    PK096_DROWZEE = 0x60,
    PK097_HYPNO = 0x61,
    PK098_KRABBY = 0x62,
    PK099_KINGLER = 0x63,
    PK100_VOLTORB = 0x64,
    PK101_ELECTRODE = 0x65,
    PK102_EXEGGCUTE = 0x66,
    PK103_EXEGGUTOR = 0x67,
    PK104_CUBONE = 0x68,
    PK105_MAROWAK = 0x69,
    PK106_HITMONLEE = 0x6A,
    PK107_HITMONCHAN = 0x6B,
    PK108_LICKITUNG = 0x6C,
    PK109_KOFFING = 0x6D,
    PK110_WEEZING = 0x6E,
    PK111_RHYHORN = 0x6F,
    PK112_RHYDON = 0x70,
    PK113_CHANSEY = 0x71,
    PK114_TANGELA = 0x72,
    PK115_KANGASKHAN = 0x73,
    PK116_HORSEA = 0x74,
    PK117_SEADRA = 0x75,
    PK118_GOLDEEN = 0x76,
    PK119_SEAKING = 0x77,
    PK120_STARYU = 0x78,
    PK121_STARMIE = 0x79,
    PK122_MR_MIME = 0x7A,
    PK123_SCYTHER = 0x7B,
    PK124_JYNX = 0x7C,
    PK125_ELECTABUZZ = 0x7D,
    PK126_MAGMAR = 0x7E,
    PK127_PINSIR = 0x7F,
    PK128_TAUROS = 0x80,
    PK129_MAGIKARP = 0x81,
    PK130_GYARADOS = 0x82,
    PK131_LAPRAS = 0x83,
    PK132_DITTO = 0x84,
    PK133_EEVEE = 0x85,
    PK134_VAPOREON = 0x86,
    PK135_JOLTEON = 0x87,
    PK136_FLAREON = 0x88,
    PK137_PORYGON = 0x89,
    PK138_OMANYTE = 0x8A,
    PK139_OMASTAR = 0x8B,
    PK140_KABUTO = 0x8C,
    PK141_KABUTOPS = 0x8D,
    PK142_AERODACTYL = 0x8E,
    PK143_SNORLAX = 0x8F,
    PK144_ARTICUNO = 0x90,
    PK145_ZAPDOS = 0x91,
    PK146_MOLTRES = 0x92,
    PK147_DRATINI = 0x93,
    PK148_DRAGONAIR = 0x94,
    PK149_DRAGONITE = 0x95,
    PK150_MEWTWO = 0x96,
    PK151_MEW = 0x97,
    PK152_CHIKORITA = 0x98,
    PK153_BAYLEEF = 0x99,
    PK154_MEGANIUM = 0x9A,
    PK155_CYNDAQUIL = 0x9B,
    PK156_QUILAVA = 0x9C,
    PK157_TYPHLOSION = 0x9D,
    PK158_TOTODILE = 0x9E,
    PK159_CROCONAW = 0x9F,
    PK160_FERALIGATR = 0xA0,
    PK161_SENTRET = 0xA1,
    PK162_FURRET = 0xA2,
    PK163_HOOTHOOT = 0xA3,
    PK164_NOCTOWL = 0xA4,
    PK165_LEDYBA = 0xA5,
    PK166_LEDIAN = 0xA6,
    PK167_SPINARAK = 0xA7,
    PK168_ARIADOS = 0xA8,
    PK169_CROBAT = 0xA9,
    PK170_CHINCHOU = 0xAA,
    PK171_LANTURN = 0xAB,
    PK172_PICHU = 0xAC,
    PK173_CLEFFA = 0xAD,
    PK174_IGGLYBUFF = 0xAE,
    PK175_TOGEPI = 0xAF,
    PK176_TOGETIC = 0xB0,
    PK177_NATU = 0xB1,
    PK178_XATU = 0xB2,
    PK179_MAREEP = 0xB3,
    PK180_FLAAFFY = 0xB4,
    PK181_AMPHAROS = 0xB5,
    PK182_BELLOSSOM = 0xB6,
    PK183_MARILL = 0xB7,
    PK184_AZUMARILL = 0xB8,
    PK185_SUDOWOODO = 0xB9,
    PK186_POLITOED = 0xBA,
    PK187_HOPPIP = 0xBB,
    PK188_SKIPLOOM = 0xBC,
    PK189_JUMPLUFF = 0xBD,
    PK190_AIPOM = 0xBE,
    PK191_SUNKERN = 0xBF,
    PK192_SUNFLORA = 0xC0,
    PK193_YANMA = 0xC1,
    PK194_WOOPER = 0xC2,
    PK195_QUAGSIRE = 0xC3,
    PK196_ESPEON = 0xC4,
    PK197_UMBREON = 0xC5,
    PK198_MURKROW = 0xC6,
    PK199_SLOWKING = 0xC7,
    PK200_MISDREAVUS = 0xC8,
    PK201_UNOWN = 0xC9,
    PK202_WOBBUFFET = 0xCA,
    PK203_GIRAFARIG = 0xCB,
    PK204_PINECO = 0xCC,
    PK205_FORRETRESS = 0xCD,
    PK206_DUNSPARCE = 0xCE,
    PK207_GLIGAR = 0xCF,
    PK208_STEELIX = 0xD0,
    PK209_SNUBBULL = 0xD1,
    PK210_GRANBULL = 0xD2,
    PK211_QWILFISH = 0xD3,
    PK212_SCIZOR = 0xD4,
    PK213_SHUCKLE = 0xD5,
    PK214_HERACROSS = 0xD6,
    PK215_SNEASEL = 0xD7,
    PK216_TEDDIURSA = 0xD8,
    PK217_URSARING = 0xD9,
    PK218_SLUGMA = 0xDA,
    PK219_MAGCARGO = 0xDB,
    PK220_SWINUB = 0xDC,
    PK221_PILOSWINE = 0xDD,
    PK222_CORSOLA = 0xDE,
    PK223_REMORAID = 0xDF,
    PK224_OCTILLERY = 0xE0,
    PK225_DELIBIRD = 0xE1,
    PK226_MANTINE = 0xE2,
    PK227_SKARMORY = 0xE3,
    PK228_HOUNDOUR = 0xE4,
    PK229_HOUNDOOM = 0xE5,
    PK230_KINGDRA = 0xE6,
    PK231_PHANPY = 0xE7,
    PK232_DONPHAN = 0xE8,
    PK233_PORYGON2 = 0xE9,
    PK234_STANTLER = 0xEA,
    PK235_SMEARGLE = 0xEB,
    PK236_TYROGUE = 0xEC,
    PK237_HITMONTOP = 0xED,
    PK238_SMOOCHUM = 0xEE,
    PK239_ELEKID = 0xEF,
    PK240_MAGBY = 0xF0,
    PK241_MILTANK = 0xF1,
    PK242_BLISSEY = 0xF2,
    PK243_RAIKOU = 0xF3,
    PK244_ENTEI = 0xF4,
    PK245_SUICUNE = 0xF5,
    PK246_LARVITAR = 0xF6,
    PK247_PUPITAR = 0xF7,
    PK248_TYRANITAR = 0xF8,
    PK249_LUGIA = 0xF9,
    PK250_HO_OH = 0xFA,
    PK251_CELEBI = 0xFB,
    PK252_TREECKO = 0xFC,
    PK253_GROVYLE = 0xFD,
    PK254_SCEPTILE = 0xFE,
    PK255_TORCHIC = 0xFF,
    PK256_COMBUSKEN = 0x100,
    PK257_BLAZIKEN = 0x101,
    PK258_MUDKIP = 0x102,
    PK259_MARSHTOMP = 0x103,
    PK260_SWAMPERT = 0x104,
    PK261_POOCHYENA = 0x105,
    PK262_MIGHTYENA = 0x106,
    PK263_ZIGZAGOON = 0x107,
    PK264_LINOONE = 0x108,
    PK265_WURMPLE = 0x109,
    PK266_SILCOON = 0x10A,
    PK267_BEAUTIFLY = 0x10B,
    PK268_CASCOON = 0x10C,
    PK269_DUSTOX = 0x10D,
    PK270_LOTAD = 0x10E,
    PK271_LOMBRE = 0x10F,
    PK272_LUDICOLO = 0x110,
    PK273_SEEDOT = 0x111,
    PK274_NUZLEAF = 0x112,
    PK275_SHIFTRY = 0x113,
    PK276_TAILLOW = 0x114,
    PK277_SWELLOW = 0x115,
    PK278_WINGULL = 0x116,
    PK279_PELIPPER = 0x117,
    PK280_RALTS = 0x118,
    PK281_KIRLIA = 0x119,
    PK282_GARDEVOIR = 0x11A,
    PK283_SURSKIT = 0x11B,
    PK284_MASQUERAIN = 0x11C,
    PK285_SHROOMISH = 0x11D,
    PK286_BRELOOM = 0x11E,
    PK287_SLAKOTH = 0x11F,
    PK288_VIGOROTH = 0x120,
    PK289_SLAKING = 0x121,
    PK290_NINCADA = 0x122,
    PK291_NINJASK = 0x123,
    PK292_SHEDINJA = 0x124,
    PK293_WHISMUR = 0x125,
    PK294_LOUDRED = 0x126,
    PK295_EXPLOUD = 0x127,
    PK296_MAKUHITA = 0x128,
    PK297_HARIYAMA = 0x129,
    PK298_AZURILL = 0x12A,
    PK299_NOSEPASS = 0x12B,
    PK300_SKITTY = 0x12C,
    PK301_DELCATTY = 0x12D,
    PK302_SABLEYE = 0x12E,
    PK303_MAWILE = 0x12F,
    PK304_ARON = 0x130,
    PK305_LAIRON = 0x131,
    PK306_AGGRON = 0x132,
    PK307_MEDITITE = 0x133,
    PK308_MEDICHAM = 0x134,
    PK309_ELECTRIKE = 0x135,
    PK310_MANECTRIC = 0x136,
    PK311_PLUSLE = 0x137,
    PK312_MINUN = 0x138,
    PK313_VOLBEAT = 0x139,
    PK314_ILLUMISE = 0x13A,
    PK315_ROSELIA = 0x13B,
    PK316_GULPIN = 0x13C,
    PK317_SWALOT = 0x13D,
    PK318_CARVANHA = 0x13E,
    PK319_SHARPEDO = 0x13F,
    PK320_WAILMER = 0x140,
    PK321_WAILORD = 0x141,
    PK322_NUMEL = 0x142,
    PK323_CAMERUPT = 0x143,
    PK324_TORKOAL = 0x144,
    PK325_SPOINK = 0x145,
    PK326_GRUMPIG = 0x146,
    PK327_SPINDA = 0x147,
    PK328_TRAPINCH = 0x148,
    PK329_VIBRAVA = 0x149,
    PK330_FLYGON = 0x14A,
    PK331_CACNEA = 0x14B,
    PK332_CACTURNE = 0x14C,
    PK333_SWABLU = 0x14D,
    PK334_ALTARIA = 0x14E,
    PK335_ZANGOOSE = 0x14F,
    PK336_SEVIPER = 0x150,
    PK337_LUNATONE = 0x151,
    PK338_SOLROCK = 0x152,
    PK339_BARBOACH = 0x153,
    PK340_WHISCASH = 0x154,
    PK341_CORPHISH = 0x155,
    PK342_CRAWDAUNT = 0x156,
    PK343_BALTOY = 0x157,
    PK344_CLAYDOL = 0x158,
    PK345_LILEEP = 0x159,
    PK346_CRADILY = 0x15A,
    PK347_ANORITH = 0x15B,
    PK348_ARMALDO = 0x15C,
    PK349_FEEBAS = 0x15D,
    PK350_MILOTIC = 0x15E,
    PK351_CASTFORM = 0x15F,
    PK352_KECLEON = 0x160,
    PK353_SHUPPET = 0x161,
    PK354_BANETTE = 0x162,
    PK355_DUSKULL = 0x163,
    PK356_DUSCLOPS = 0x164,
    PK357_TROPIUS = 0x165,
    PK358_CHIMECHO = 0x166,
    PK359_ABSOL = 0x167,
    PK360_WYNAUT = 0x168,
    PK361_SNORUNT = 0x169,
    PK362_GLALIE = 0x16A,
    PK363_SPHEAL = 0x16B,
    PK364_SEALEO = 0x16C,
    PK365_WALREIN = 0x16D,
    PK366_CLAMPERL = 0x16E,
    PK367_HUNTAIL = 0x16F,
    PK368_GOREBYSS = 0x170,
    PK369_RELICANTH = 0x171,
    PK370_LUVDISC = 0x172,
    PK371_BAGON = 0x173,
    PK372_SHELGON = 0x174,
    PK373_SALAMENCE = 0x175,
    PK374_BELDUM = 0x176,
    PK375_METANG = 0x177,
    PK376_METAGROSS = 0x178,
    PK377_REGIROCK = 0x179,
    PK378_REGICE = 0x17A,
    PK379_REGISTEEL = 0x17B,
    PK380_LATIAS = 0x17C,
    PK381_LATIOS = 0x17D,
    PK382_KYOGRE = 0x17E,
    PK383_GROUDON = 0x17F,
    PK384_RAYQUAZA = 0x180,
    PK385_JIRACHI = 0x181,
    PK386_DEOXYS = 0x182,
    PK387_TURTWIG = 0x183,
    PK388_GROTLE = 0x184,
    PK389_TORTERRA = 0x185,
    PK390_CHIMCHAR = 0x186,
    PK391_MONFERNO = 0x187,
    PK392_INFERNAPE = 0x188,
    PK393_PIPLUP = 0x189,
    PK394_PRINPLUP = 0x18A,
    PK395_EMPOLEON = 0x18B,
    PK396_STARLY = 0x18C,
    PK397_STARAVIA = 0x18D,
    PK398_STARAPTOR = 0x18E,
    PK399_BIDOOF = 0x18F,
    PK400_BIBAREL = 0x190,
    PK401_KRICKETOT = 0x191,
    PK402_KRICKETUNE = 0x192,
    PK403_SHINX = 0x193,
    PK404_LUXIO = 0x194,
    PK405_LUXRAY = 0x195,
    PK406_BUDEW = 0x196,
    PK407_ROSERADE = 0x197,
    PK408_CRANIDOS = 0x198,
    PK409_RAMPARDOS = 0x199,
    PK410_SHIELDON = 0x19A,
    PK411_BASTIODON = 0x19B,
    PK412_BURMY = 0x19C,
    PK413_WORMADAM = 0x19D,
    PK414_MOTHIM = 0x19E,
    PK415_COMBEE = 0x19F,
    PK416_VESPIQUEN = 0x1A0,
    PK417_PACHIRISU = 0x1A1,
    PK418_BUIZEL = 0x1A2,
    PK419_FLOATZEL = 0x1A3,
    PK420_CHERUBI = 0x1A4,
    PK421_CHERRIM = 0x1A5,
    PK422_SHELLOS = 0x1A6,
    PK423_GASTRODON = 0x1A7,
    PK424_AMBIPOM = 0x1A8,
    PK425_DRIFLOON = 0x1A9,
    PK426_DRIFBLIM = 0x1AA,
    PK427_BUNEARY = 0x1AB,
    PK428_LOPUNNY = 0x1AC,
    PK429_MISMAGIUS = 0x1AD,
    PK430_HONCHKROW = 0x1AE,
    PK431_GLAMEOW = 0x1AF,
    PK432_PURUGLY = 0x1B0,
    PK433_CHINGLING = 0x1B1,
    PK434_STUNKY = 0x1B2,
    PK435_SKUNTANK = 0x1B3,
    PK436_BRONZOR = 0x1B4,
    PK437_BRONZONG = 0x1B5,
    PK438_BONSLY = 0x1B6,
    PK439_MIME_JR = 0x1B7,
    PK440_HAPPINY = 0x1B8,
    PK441_CHATOT = 0x1B9,
    PK442_SPIRITOMB = 0x1BA,
    PK443_GIBLE = 0x1BB,
    PK444_GABITE = 0x1BC,
    PK445_GARCHOMP = 0x1BD,
    PK446_MUNCHLAX = 0x1BE,
    PK447_RIOLU = 0x1BF,
    PK448_LUCARIO = 0x1C0,
    PK449_HIPPOPOTAS = 0x1C1,
    PK450_HIPPOWDON = 0x1C2,
    PK451_SKORUPI = 0x1C3,
    PK452_DRAPION = 0x1C4,
    PK453_CROAGUNK = 0x1C5,
    PK454_TOXICROAK = 0x1C6,
    PK455_CARNIVINE = 0x1C7,
    PK456_FINNEON = 0x1C8,
    PK457_LUMINEON = 0x1C9,
    PK458_MANTYKE = 0x1CA,
    PK459_SNOVER = 0x1CB,
    PK460_ABOMASNOW = 0x1CC,
    PK461_WEAVILE = 0x1CD,
    PK462_MAGNEZONE = 0x1CE,
    PK463_LICKILICKY = 0x1CF,
    PK464_RHYPERIOR = 0x1D0,
    PK465_TANGROWTH = 0x1D1,
    PK466_ELECTIVIRE = 0x1D2,
    PK467_MAGMORTAR = 0x1D3,
    PK468_TOGEKISS = 0x1D4,
    PK469_YANMEGA = 0x1D5,
    PK470_LEAFEON = 0x1D6,
    PK471_GLACEON = 0x1D7,
    PK472_GLISCOR = 0x1D8,
    PK473_MAMOSWINE = 0x1D9,
    PK474_PORYGON_Z = 0x1DA,
    PK475_GALLADE = 0x1DB,
    PK476_PROBOPASS = 0x1DC,
    PK477_DUSKNOIR = 0x1DD,
    PK478_FROSLASS = 0x1DE,
    PK479_ROTOM = 0x1DF,
    PK480_UXIE = 0x1E0,
    PK481_MESPRIT = 0x1E1,
    PK482_AZELF = 0x1E2,
    PK483_DIALGA = 0x1E3,
    PK484_PALKIA = 0x1E4,
    PK485_HEATRAN = 0x1E5,
    PK486_REGIGIGAS = 0x1E6,
    PK487_GIRATINA = 0x1E7,
    PK488_CRESSELIA = 0x1E8,
    PK489_PHIONE = 0x1E9,
    PK490_MANAPHY = 0x1EA,
    PK491_DARKRAI = 0x1EB,
    PK492_SHAYMIN = 0x1EC,
    PK493_ARCEUS = 0x1ED,
    PK494_VICTINI = 0x1EE,
    PK495_SNIVY = 0x1EF,
    PK496_SERVINE = 0x1F0,
    PK497_SERPERIOR = 0x1F1,
    PK498_TEPIG = 0x1F2,
    PK499_PIGNITE = 0x1F3,
    PK500_EMBOAR = 0x1F4,
    PK501_OSHAWOTT = 0x1F5,
    PK502_DEWOTT = 0x1F6,
    PK503_SAMUROTT = 0x1F7,
    PK504_PATRAT = 0x1F8,
    PK505_WATCHOG = 0x1F9,
    PK506_LILLIPUP = 0x1FA,
    PK507_HERDIER = 0x1FB,
    PK508_STOUTLAND = 0x1FC,
    PK509_PURRLOIN = 0x1FD,
    PK510_LIEPARD = 0x1FE,
    PK511_PANSAGE = 0x1FF,
    PK512_SIMISAGE = 0x200,
    PK513_PANSEAR = 0x201,
    PK514_SIMISEAR = 0x202,
    PK515_PANPOUR = 0x203,
    PK516_SIMIPOUR = 0x204,
    PK517_MUNNA = 0x205,
    PK518_MUSHARNA = 0x206,
    PK519_PIDOVE = 0x207,
    PK520_TRANQUILL = 0x208,
    PK521_UNFEZANT = 0x209,
    PK522_BLITZLE = 0x20A,
    PK523_ZEBSTRIKA = 0x20B,
    PK524_ROGGENROLA = 0x20C,
    PK525_BOLDORE = 0x20D,
    PK526_GIGALITH = 0x20E,
    PK527_WOOBAT = 0x20F,
    PK528_SWOOBAT = 0x210,
    PK529_DRILBUR = 0x211,
    PK530_EXCADRILL = 0x212,
    PK531_AUDINO = 0x213,
    PK532_TIMBURR = 0x214,
    PK533_GURDURR = 0x215,
    PK534_CONKELDURR = 0x216,
    PK535_TYMPOLE = 0x217,
    PK536_PALPITOAD = 0x218,
    PK537_SEISMITOAD = 0x219,
    PK538_THROH = 0x21A,
    PK539_SAWK = 0x21B,
    PK540_SEWADDLE = 0x21C,
    PK541_SWADLOON = 0x21D,
    PK542_LEAVANNY = 0x21E,
    PK543_VENIPEDE = 0x21F,
    PK544_WHIRLIPEDE = 0x220,
    PK545_SCOLIPEDE = 0x221,
    PK546_COTTONEE = 0x222,
    PK547_WHIMSICOTT = 0x223,
    PK548_PETILIL = 0x224,
    PK549_LILLIGANT = 0x225,
    PK550_BASCULIN = 0x226,
    PK551_SANDILE = 0x227,
    PK552_KROKOROK = 0x228,
    PK553_KROOKODILE = 0x229,
    PK554_DARUMAKA = 0x22A,
    PK555_DARMANITAN = 0x22B,
    PK556_MARACTUS = 0x22C,
    PK557_DWEBBLE = 0x22D,
    PK558_CRUSTLE = 0x22E,
    PK559_SCRAGGY = 0x22F,
    PK560_SCRAFTY = 0x230,
    PK561_SIGILYPH = 0x231,
    PK562_YAMASK = 0x232,
    PK563_COFAGRIGUS = 0x233,
    PK564_TIRTOUGA = 0x234,
    PK565_CARRACOSTA = 0x235,
    PK566_ARCHEN = 0x236,
    PK567_ARCHEOPS = 0x237,
    PK568_TRUBBISH = 0x238,
    PK569_GARBODOR = 0x239,
    PK570_ZORUA = 0x23A,
    PK571_ZOROARK = 0x23B,
    PK572_MINCCINO = 0x23C,
    PK573_CINCCINO = 0x23D,
    PK574_GOTHITA = 0x23E,
    PK575_GOTHORITA = 0x23F,
    PK576_GOTHITELLE = 0x240,
    PK577_SOLOSIS = 0x241,
    PK578_DUOSION = 0x242,
    PK579_REUNICLUS = 0x243,
    PK580_DUCKLETT = 0x244,
    PK581_SWANNA = 0x245,
    PK582_VANILLITE = 0x246,
    PK583_VANILLISH = 0x247,
    PK584_VANILLUXE = 0x248,
    PK585_DEERLING = 0x249,
    PK586_SAWSBUCK = 0x24A,
    PK587_EMOLGA = 0x24B,
    PK588_KARRABLAST = 0x24C,
    PK589_ESCAVALIER = 0x24D,
    PK590_FOONGUS = 0x24E,
    PK591_AMOONGUSS = 0x24F,
    PK592_FRILLISH = 0x250,
    PK593_JELLICENT = 0x251,
    PK594_ALOMOMOLA = 0x252,
    PK595_JOLTIK = 0x253,
    PK596_GALVANTULA = 0x254,
    PK597_FERROSEED = 0x255,
    PK598_FERROTHORN = 0x256,
    PK599_KLINK = 0x257,
    PK600_KLANG = 0x258,
    PK601_KLINKLANG = 0x259,
    PK602_TYNAMO = 0x25A,
    PK603_EELEKTRIK = 0x25B,
    PK604_EELEKTROSS = 0x25C,
    PK605_ELGYEM = 0x25D,
    PK606_BEHEEYEM = 0x25E,
    PK607_LITWICK = 0x25F,
    PK608_LAMPENT = 0x260,
    PK609_CHANDELURE = 0x261,
    PK610_AXEW = 0x262,
    PK611_FRAXURE = 0x263,
    PK612_HAXORUS = 0x264,
    PK613_CUBCHOO = 0x265,
    PK614_BEARTIC = 0x266,
    PK615_CRYOGONAL = 0x267,
    PK616_SHELMET = 0x268,
    PK617_ACCELGOR = 0x269,
    PK618_STUNFISK = 0x26A,
    PK619_MIENFOO = 0x26B,
    PK620_MIENSHAO = 0x26C,
    PK621_DRUDDIGON = 0x26D,
    PK622_GOLETT = 0x26E,
    PK623_GOLURK = 0x26F,
    PK624_PAWNIARD = 0x270,
    PK625_BISHARP = 0x271,
    PK626_BOUFFALANT = 0x272,
    PK627_RUFFLET = 0x273,
    PK628_BRAVIARY = 0x274,
    PK629_VULLABY = 0x275,
    PK630_MANDIBUZZ = 0x276,
    PK631_HEATMOR = 0x277,
    PK632_DURANT = 0x278,
    PK633_DEINO = 0x279,
    PK634_ZWEILOUS = 0x27A,
    PK635_HYDREIGON = 0x27B,
    PK636_LARVESTA = 0x27C,
    PK637_VOLCARONA = 0x27D,
    PK638_COBALION = 0x27E,
    PK639_TERRAKION = 0x27F,
    PK640_VIRIZION = 0x280,
    PK641_TORNADUS = 0x281,
    PK642_THUNDURUS = 0x282,
    PK643_RESHIRAM = 0x283,
    PK644_ZEKROM = 0x284,
    PK645_LANDORUS = 0x285,
    PK646_KYUREM = 0x286,
    PK647_KELDEO = 0x287,
    PK648_MELOETTA = 0x288,
    PK649_GENESECT = 0x289,
    MONSNO_MAX = 0x28A,
};

enum AbilLock
{
    ABIL_0 = 0x0,
    ABIL_1 = 0x1,
    ABIL_ANY = 0x2,
    ABIL_HIDDEN = 0x3,
};

enum BattleFieldEffect
#ifdef __cplusplus
    : u32
#endif
{
    EFFECT_WEATHER = 0x0,
    EFFECT_TRICK_ROOM = 0x1,
    EFFECT_GRAVITY = 0x2,
    EFFECT_IMPRISON = 0x3,
    EFFECT_WATER_SPORT = 0x4,
    EFFECT_MUD_SPORT = 0x5,
    EFFECT_WONDER_ROOM = 0x6,
    EFFECT_MAGIC_ROOM = 0x7,
};

enum BattleEventType
{
    EVENT_NULL = 0x0,
    EVENT_ACTION_PROCESSING_START = 0x1,
    EVENT_ACTION_PROCESSING_END = 0x2,
    EVENT_MOVE_SEQUENCE_START = 0x3,
    EVENT_MOVE_SEQUENCE_END = 0x4,
    EVENT_BYPASS_SUBSTITUTE = 0x5,
    EVENT_CHECK_DELAYED_MOVE = 0x6,
    EVENT_DECIDE_DELAYED_MOVE = 0x7,
    EVENT_MOVE_SEQUENCE_STEAL = 0x8,
    EVENT_MOVE_SEQUENCE_REFLECT = 0x9,
    EVENT_A = 0xA,
    EVENT_SKIP_RUN_CALC = 0xB,
    EVENT_PREVENT_RUN = 0xC,
    EVENT_RUN_EXIT_MESSAGE = 0xD,
    EVENT_CHECK_SLEEP = 0xE,
    EVENT_CHECK_SPECIAL_PRIORITY = 0xF,
    EVENT_GET_MOVE_PRIORITY = 0x11,
    EVENT_CHECK_FLOATING = 0x12,
    EVENT_CALC_SPEED = 0x13,
    EVENT_14 = 0x14,
    EVENT_BEFORE_ATTACKS = 0x15,
    EVENT_MOVE_REQUEST_FOR_ACTION_ORDER = 0x16,
    EVENT_MOVE_REQUEST_CHECK_FAIL = 0x17,
    EVENT_MOVE_REQUEST_PARAM = 0x18,
    EVENT_MOVE_REQUEST_MESSAGE = 0x19,
    EVENT_CHECK_MOVE_STEAL = 0x1A,
    EVENT_FLOATING_IMMUNE_TO_MOVE = 0x1B,
    EVENT_SKIP_AVOID_CHECK = 0x1C,
    EVENT_CHECK_MOVE_FAIL = 0x1D,
    EVENT_MOVE_EXECUTE_CHECK1 = 0x1E,
    EVENT_MOVE_EXECUTE_CHECK2 = 0x1F,
    EVENT_MOVE_EXECUTE_CHECK3 = 0x20,
    EVENT_MOVE_EXECUTE_FAIL = 0x21,
    EVENT_CHOOSE_MOVE = 0x22,
    EVENT_BREAK_OPPONENT_GUARD = 0x23,
    EVENT_MOVE_EXECUTE_START = 0x24,
    EVENT_MOVE_EXECUTE_EFFECTIVE = 0x25,
    EVENT_MOVE_EXECUTE_NOEFFECT = 0x26,
    EVENT_MOVE_EXECUTE_END = 0x27,
    EVENT_MOVE_PARAM = 0x28,
    EVENT_DECIDE_TARGET = 0x29,
    EVENT_REDIRECT_TARGET = 0x2A,
    EVENT_REDIRECT_TARGETEND = 0x2B,
    EVENT_NOEFFECT_CHECK = 0x2C,
    EVENT_ABILITY_CHECK_NO_EFFECT = 0x2D,
    EVENT_CHECK_PROTECT_BREAK = 0x2E,
    EVENT_AVOID_MOVE = 0x2F,
    EVENT_CHECK_DAMAGE_TO_RECOVER = 0x30,
    EVENT_APPLY_DAMAGE_TO_RECOVER = 0x31,
    EVENT_BYPASS_ACCURACY_CHECK = 0x32,
    EVENT_MOVE_ACCURACY_STAGE = 0x33,
    EVENT_MOVE_ACCURACY = 0x34,
    EVENT_MOVE_HIT_COUNT = 0x35,
    EVENT_CRITICAL_CHECK = 0x36,
    EVENT_MOVE_BASE_POWER = 0x37,
    EVENT_MOVE_POWER = 0x38,
    EVENT_BEFORE_ATTACKER_POWER = 0x39,
    EVENT_BEFORE_DEFENDER_GUARD = 0x3A,
    EVENT_ATTACKER_POWER = 0x3B,
    EVENT_DEFENDER_GUARD = 0x3C,
    EVENT_CHECK_TYPE_EFFECTIVENESS_ENABLE = 0x3D,
    EVENT_CHECK_TYPE_EFFECTIVENESS = 0x3E,
    EVENT_REWRITE_TYPE_EFFECTIVENESS = 0x3F,
    EVENT_TYPE_MATCH_CHECK = 0x40,
    EVENT_SAME_TYPE_ATTACK_BONUS = 0x41,
    EVENT_ATTACKER_TYPE = 0x42,
    EVENT_DEFENDER_TYPE = 0x43,
    EVENT_AFTER_DAMAGE_REACTION = 0x44,
    EVENT_DETERMINE_MOVE_DAMAGE = 0x45,
    EVENT_MOVE_DAMAGE_PROCESSING_1 = 0x46,
    EVENT_MOVE_DAMAGE_PROCESSING_2 = 0x47,
    EVENT_MOVE_DAMAGE_PROCESSING_END = 0x48,
    EVENT_MOVE_DAMAGE_PROCESSING_FINAL = 0x49,
    EVENT_PREVIOUS_MOVE_REACTION = 0x4A,
    EVENT_MOVE_DAMAGE_REACTION_1 = 0x4B,
    EVENT_MOVE_DAMAGE_REACTION_2 = 0x4C,
    EVENT_MOVE_DAMAGE_SIDE_AFTER = 0x4D,
    EVENT_DECREMENT_PP = 0x4E,
    EVENT_DECREMENT_PP_DONE = 0x4F,
    EVENT_CALC_RECOIL = 0x50,
    EVENT_ADD_STAT_STAGE_CHANGE_TARGET = 0x51,
    EVENT_ADD_STAT_STAGE_CHANGE_USER = 0x52,
    EVENT_SWITCH_OUT_INTERRUPT = 0x53,
    EVENT_SWITCH_OUT_END = 0x54,
    EVENT_SWITCH_IN = 0x55,
    EVENT_SWITCH_IN_PREVIOUS = 0x56,
    EVENT_AFTER_LAST_SWITCHIN = 0x57,
    EVENT_CHECK_ACTIVATION = 0x58,
    EVENT_GET_STAT_STAGE_CHANGE_VALUE = 0x59,
    EVENT_STAT_STAGE_CHANGE = 0x5A,
    EVENT_STAT_STAGE_CHANGE_LAST_CHECK = 0x5B,
    EVENT_STAT_STAGE_CHANGE_FAIL = 0x5C,
    EVENT_STAT_STAGE_CHANGE_APPLIED = 0x5D,
    EVENT_MOVE_STAT_STAGE_CHANGE_APPLIED = 0x5E,
    EVENT_MOVE_CONDITION_TURN_COUNT = 0x5F,
    EVENT_MOVE_CONDITION_SPECIAL = 0x60,
    EVENT_MOVE_CONDITION_MESSAGE = 0x61,
    EVENT_MOVE_CONDITION_PARAM = 0x62,
    EVENT_ADD_CONDITION_TYPE = 0x63,
    EVENT_ADD_CONDITION = 0x64,
    EVENT_ADD_CONDITION_CHECK_FAIL = 0x65,
    EVENT_ADD_CONDITION_APPLIED = 0x66,
    EVENT_ADD_CONDITION_FAIL = 0x67,
    EVENT_ADD_BASIC_STATUS = 0x68,
    EVENT_MOVE_CONDITION_APPLIED = 0x69,
    EVENT_ABILITY_NULLIFIED = 0x6A,
    EVENT_CONDITION_DAMAGE = 0x6B,
    EVENT_MOVE_FLINCH_CHANCE = 0x6C,
    EVENT_FLINCH_CHECK = 0x6D,
    EVENT_FLINCH_FAIL = 0x6E,
    EVENT_FLINCH_APPLIED = 0x6F,
    EVENT_OHKO_CHECK = 0x70,
    EVENT_OHKO_PREVENT = 0x71,
    EVENT_USE_ITEM = 0x72,
    EVENT_USE_ITEM_TEMP = 0x73,
    EVENT_ENDURE_CHECK = 0x74,
    EVENT_ENDURE = 0x75,
    EVENT_TURN_CHECK_BEGIN = 0x76,
    EVENT_TURN_CHECK_END = 0x77,
    EVENT_TURN_CHECK_DONE = 0x78,
    EVENT_NOTIFY_AIR_LOCK = 0x79,
    EVENT_WEATHER_CHECK = 0x7A,
    EVENT_WEIGHT_RATIO = 0x7B,
    EVENT_MOVE_WEATHER_TURN_COUNT = 0x7C,
    EVENT_WEATHER_CHANGE = 0x7D,
    EVENT_AFTER_WEATHER_CHANGE = 0x7E,
    EVENT_WEATHER_REACTION = 0x7F,
    EVENT_ENABLE_SIMPLE_DAMAGE = 0x80,
    EVENT_DAMAGE_PROCESSING_START = 0x81,
    EVENT_DAMAGE_PROCESSING_END_PREVIOUSHIT = 0x82,
    EVENT_DAMAGE_PROCESSING_END_HIT_REAL = 0x83,
    EVENT_DAMAGE_PROCESSING_END_HIT_1 = 0x84,
    EVENT_DAMAGE_PROCESSING_END_HIT_2 = 0x85,
    EVENT_DAMAGE_PROCESSING_END_HIT_3 = 0x86,
    EVENT_DAMAGE_PROCESSING_END_HIT_4 = 0x87,
    EVENT_DAMAGE_PROCESSING_END = 0x88,
    EVENT_BEFORE_ABILITY_CHANGE = 0x89,
    EVENT_AFTER_ABILITY_CHANGE = 0x8A,
    EVENT_CHECK_FORCE_SWITCH = 0x8B,
    EVENT_CALC_DRAIN = 0x8C,
    EVENT_CALC_DRAIN_END = 0x8D,
    EVENT_RECOVER_HP = 0x8F,
    EVENT_AFTER_ITEM_EQUIP = 0x90,
    EVENT_CHECK_ITEM_REACTION = 0x91,
    EVENT_ITEM_CONSUMED = 0x92,
    EVENT_CHECK_CHARGE_UP_FAIL = 0x93,
    EVENT_CHECK_CHARGE_UP_SKIP = 0x94,
    EVENT_CHARGE_UP_START = 0x95,
    EVENT_CHARGE_UP_START_DONE = 0x96,
    EVENT_CHARGE_UP_SKIP = 0x97,
    EVENT_CHARGE_UP_END = 0x98,
    EVENT_CHECK_HIDING = 0x99,
    EVENT_HELD_ITEM_CHECK = 0x9A,
    EVENT_HELD_ITEM_FAIL = 0x9B,
    EVENT_HELD_ITEM_DECIDE = 0x9C,
    EVENT_ITEM_REWRITE_DONE = 0x9D,
    EVENT_CALL_FIELD_EFFECT = 0x9E,
    EVENT_CHECK_SIDE_EFFECT_PARAM = 0x9F,
    EVENT_UNCATEGORIZED_MOVE = 0xA0,
    EVENT_UNCATEGORIZED_MOVE_NO_TARGET = 0xA1,
    EVENT_COMBINED_MOVE_CHECK = 0xA2,
    EVENT_NOTIFY_FAINTED = 0xA3,
    EVENT_AFTER_MOVE = 0xA4,
};

enum MoveFlag
#ifdef __cplusplus
    : u32
#endif
{
    FLAG_CONTACT = 0x0,
    FLAG_REQUIRES_CHARGE = 0x1,
    FLAG_RECHARGE = 0x2,
    FLAG_BLOCKED_BY_PROTECT = 0x3,
    FLAG_REFLECTED_BY_MAGIC_COAT = 0x4,
    FLAG_STOLEN_BY_SNATCH = 0x5,
    FLAG_COPIED_BY_MIRROR_MOVE = 0x6,
    FLAG_PUNCH = 0x7,
    FLAG_SOUND = 0x8,
    FLAG_GROUNDED_BY_GRAVITY = 0x9,
    FLAG_HEALING = 0xC
};

enum TypeEffectiveness
#ifdef __cplusplus
    : int
#endif
{
    EFFECTIVENESS_IMMUNE = 0,
    EFFECTIVENESS_1_4 = 1,
    EFFECTIVENESS_1_2 = 2,
    EFFECTIVENESS_1 = 3,
    EFFECTIVENESS_2 = 4,
    EFFECTIVENESS_4 = 5
};
enum ActionIgnoreReason
{
    REASON_NONE = 0x0,
    REASON_OTHER_MOVE = 0x1,
    REASON_FALL_ASLEEP = 0x2,
    REASON_CONFUSION = 0x3,
    REASON_OVERLEVELED = 0x4,
    REASON_ASLEEP = 0x5,
};

enum BattleEventVar
{
    VAR_NULL = 0x0,
    VAR_1 = 0x1,
    VAR_MON_ID = 0x2,
    VAR_ATTACKING_MON = 0x3,
    VAR_DEFENDING_MON = 0x4,
    VAR_TARGET_COUNT = 0x5,
    VAR_TARGET_MON_ID = 0x6,
    VAR_7 = 0x7,
    VAR_8 = 0x8,
    VAR_9 = 0x9,
    VAR_A = 0xA,
    VAR_B = 0xB,
    VAR_ACTION = 0xC,
    VAR_POKE_POS = 0xD,
    VAR_ORIGINAL_TARGET = 0xE,
    VAR_PREVIOUS_ABILITY = 0xF,
    VAR_NEXT_ABILITY = 0x10,
    VAR_PRIORITY = 0x11,
    VAR_MOVE_ID = 0x12,
    VAR_MOVE_ID_2 = 0x13,
    VAR_ORIGINAL_MOVE = 0x14,
    VAR_POKE_TYPE = 0x15,
    VAR_MOVE_TYPE = 0x16,
    VAR_MOVE_INDEX = 0x17,
    VAR_MOVE_PRIORITY = 0x18,
    VAR_STAT_STAGE_CHANGE_COUNT = 0x19,
    VAR_MOVE_CATEGORY = 0x1A,
    VAR_TARGET_TYPE = 0x1B,
    VAR_USER_TYPE = 0x1C,
    VAR_CONDITION_ID = 0x1D,
    VAR_CONDITION_ADDRESS = 0x1E,
    VAR_MOVE_EFFECT = 0x1F,
    VAR_VOLUME = 0x20,
    VAR_SEMI_INVULN_TYPE = 0x21,
    VAR_FAIL_CAUSE = 0x22,
    VAR_23 = 0x23,
    VAR_EFFECT_TURN_COUNT = 0x24,
    VAR_DEFAULT_EFFECT_CHANCE = 0x25,
    VAR_EFFECT_CHANCE = 0x26,
    VAR_ACCURACY_STAGE = 0x27,
    VAR_EVASION_STAGE = 0x28,
    VAR_MAX_HIT_COUNT = 0x29,
    VAR_HIT_COUNT = 0x2A,
    VAR_ACCURACY = 0x2B,
    VAR_CRIT_STAGE = 0x2C,
    VAR_ITEM = 0x2D,
    VAR_ITEM_REACTION = 0x2E,
    VAR_SPEED = 0x2F,
    VAR_MOVE_POWER = 0x30,
    VAR_MOVE_POWER_RATIO = 0x31,
    VAR_DAMAGE = 0x32,
    VAR_POWER = 0x33,
    VAR_GUARD = 0x34,
    VAR_RATIO = 0x35,
    VAR_36 = 0x36,
    VAR_FIXED_DAMAGE = 0x37,
    VAR_TYPE_EFFECTIVENESS = 0x38,
    VAR_WEATHER = 0x39,
    VAR_ENDURE = 0x3A,
    VAR_SWAP_POKE_ID = 0x3B,
    VAR_BATTLE_MON_STAT = 0x3C,
    VAR_BATTLE_MON_STAT_SWAP_FLAG = 0x3D,
    VAR_ENABLE_MODE = 0x3E,
    VAR_WORK_ADDRESS = 0x3F,
    VAR_NO_EFFECT_FLAG = 0x40,
    VAR_MOVE_FAIL_FLAG = 0x41,
    VAR_AVOID_FLAG = 0x42,
    VAR_43 = 0x43,
    VAR_TYPE_MATCH_FLAG = 0x44,
    VAR_CRITICAL_FLAG = 0x45,
    VAR_SUBSTITUTE_FLAG = 0x46,
    VAR_SHIELD_DUST_FLAG = 0x47,
    VAR_SHEER_FORCE_FLAG = 0x48,
    VAR_49 = 0x49,
    VAR_TRICK_ROOM_FLAG = 0x4A,
    VAR_NO_TYPE_EFFECTIVENESS = 0x4B,
    VAR_SET_TYPE_EFFECTIVENESS = 0x4C,
    VAR_DELAY_ATTACK_FLAG = 0x4D,
    VAR_MAGIC_COAT_FLAG = 0x4E,
    VAR_MESSAGE_FLAG = 0x4F,
    VAR_GENERAL_USE_FLAG = 0x51,
    VAR_SIDE = 0x52,
    VAR_SIDE_EFFECT = 0x53,
    // VAR_INTIMFLAG = 0x54,
    // VAR_HOSTILEFLAG = 0x55,
    // VAR_DISPLAYED = 0x56,
};

enum SideEffect
#ifdef __cplusplus
    : u32
#endif
{
    SIDEEFF_REFLECT = 0x0,
    SIDEEFF_LIGHT_SCREEN = 0x1,
    SIDEEFF_SAFEGUARD = 0x2,
    SIDEEFF_MIST = 0x3,
    SIDEEFF_TAILWIND = 0x4,
    SIDEEFF_LUCKY_CHANT = 0x5,
    SIDEEFF_SPIKES = 0x6,
    SIDEEFF_TOXIC_SPIKES = 0x7,
    SIDEEFF_STEALTH_ROCK = 0x8,
    SIDEEFF_WIDE_GUARD = 0x9,
    SIDEEFF_QUICK_GUARD = 0xA,
    SIDEEFF_RAINBOW = 0xB,
    SIDEEFF_SEA_OF_FIRE = 0xC,
    SIDEEFF_SWAMP = 0xD,

    // New Field Effects
    SIDEEFF_STICKYWEB = 0xE,
    SIDEEFF_OPPRESSIVE = 0xF,
};

enum BattleHandlerEffect
#ifdef __cplusplus
    : u32
#endif
{
    EFFECT_CHANGESTATSTAGE = 0xE,
    EFFECT_USE_HELD_ITEM = 0,
    EFFECT_CHANGE_WEATHER = 0x1D,
    EFFECT_ABILITYPOPUPIN = 2,
    EFFECT_ABILITYPOPUPOUT = 3,
    EFFECT_CHANGEHP = 8,
    EFFECT_CHANGEABILITY = 0x1F,
    EFFECT_RESET_TURN_FLAG = 0x16,
    EFFECT_ADDSIDEEFFECT = 0x19,
    EFFECT_CONSUMEITEM = 0x23,
    EFFECT_MESSAGE = 4,
    EFFECT_RECOVERHP = 5,
    EFFECT_ADDCONDITION = 0xC,
    EFFECT_SET_CONDITION_FLAG = 0x17,
    EFFECT_CURESTATUS = 0x8,
    EFFECT_DAMAGE = 0x7,
    EFFECT_CHANGE_TYPE = 0x14,
    EFFECT_REMOVE_SIDE_EFFECT = 0x1A,
    EFFECT_CURE_STATUS = 0xB,
    EFFECT_SET_HELD_ITEM = 0x20,
    EFFECT_TRANSFORM = 0x33,
    EFFECT_SET_TURN_FLAG = 0x15,
    EFFECT_COUNTER = 0x26,
    EFFECT_ACTIVATEITEM = 0x22,
    EFFECT_SETANIMATIONID = 0x3A,
    EFFECT_ADD_ANIMATION = 0x37,
    EFFECT_SWAPITEM = 0x24,
    EFFECT_SWITCH = 0x29
};

enum BattleMonValue
#ifdef __cplusplus
    : u32
#endif
{
    VALUE_NULL = 0,
    VALUE_ATTACK_STAGE = 1,
    VALUE_DEFENSE_STAGE = 2,
    VALUE_SPECIAL_ATTACK_STAGE = 3,
    VALUE_SPECIAL_DEFENSE_STAGE = 4,
    VALUE_SPEED_STAGE = 5,
    VALUE_ACCURACY_STAGE = 6,
    VALUE_EVASION_STAGE = 7,
    VALUE_ATTACK_STAT = 8,
    VALUE_DEFENSE_STAT = 9,
    VALUE_SPECIAL_ATTACK_STAT = 0xA,
    VALUE_SPECIAL_DEFENSE_STAT = 0xB,
    VALUE_SPEED_STAT = 0xC,
    VALUE_CURRENT_HP = 0xD,
    VALUE_MAX_HP = 0xE,
    VALUE_LEVEL = 0xF,
    VALUE_ABILITY = 0x10,
    VALUE_EFFECTIVE_ABILITY = 0x11,
    VALUE_SEX = 0x12,
    VALUE_FORM = 0x13,
    VALUE_EXPERIENCE = 0x14,
    VALUE_15 = 0x15
};

enum BtlType : u32
{
    BtlType_Wild = 0x0,
    BtlType_Trainer = 0x1,
    BtlType_Facility = 0x2,
    BtlType_Online = 0x3,
    BtlType_Demo = 0x4,
    BtlType_Max = 0x5,
};

enum BattleSetupType : u8
{
    TYPE_STANDARD = 0x0,
    TYPE_NET_MULTI = 0x1,
    TYPE_NET_MULTI_VS_AI = 0x2,
    TYPE_AI_MULTI = 0x3,
    TYPE_AI_1V2 = 0x4,
    TYPE_AI_MULTI_VS_WILD = 0x5,
};

enum StatStage
#ifdef __cplusplus
    : u32
#endif
{
    STATSTAGE_NULL = 0,
    STATSTAGE_ATTACK = 1,
    STATSTAGE_DEFENSE = 2,
    STATSTAGE_SPECIAL_ATTACK = 3,
    STATSTAGE_SPECIAL_DEFENSE = 4,
    STATSTAGE_SPEED = 5,
    STATSTAGE_ACCURACY = 6,
    STATSTAGE_EVASION = 7,
};

enum statValues
#ifdef __cplusplus
    : u32
#endif
{
    ATTACK = 1,
    DEFENSE = 2,
    SPECIAL_ATTACK = 3,
    SPECIAL_DEFENSE = 4,
    SPEED = 5,
    ACCURACY = 6,
    EVASIVENESS = 7,
};

enum ServerCommandID : u32
{
    SCID_MessageStandard = 0x5A,
    SCID_MessageStandardSE = 0x5C,
    SCID_SetMessage = 0x5B,
    SCID_SetMessageSE = 0x5D,
    SCID_MoveMessage = 0x59,
    SCID_MoveAnim = 0x30,
    SCID_Hide = 0x31,
    SCID_MoveDamage = 0x32,
    SCID_MoveDamage_MultiHit = 0x33,
    SCID_OHKOMove = 0x34,
    SCID_StatusIcon = 0x35,
    SCID_ConfusionDamage = 0x36,
    SCID_Faint = 0x39,
    SCID_Revive = 0x3A,
    SCID_SwitchOutMessage = 0x3B,
    SCID_SwitchOut = 0x3C,
    SCID_SwitchIn_0 = 0x3D,
    SCID_RaiseStat = 0x37,
    SCID_LowerStat = 0x38,
    SCID_sub_21B7E00 = 0x3E,
    SCID_WeatherStart = 0x3F,
    SCID_WeatherEnd = 0x40,
    SCID_SimpleHP = 0x41,
    SCID_UseItem = 0x42,
    SCID_AbilityPopupIn = 0x57,
    SCID_AbilityPopupOut = 0x58,
    SCID_SubtractHP = 0x1,
    SCID_AddHP = 0x2,
    SCID_HPZero = 0x3,
    SCID_SubtractPP = 0x4,
    SCID_SubtractPPOrg = 0x5,
    SCID_MoveUsed = 0x6,
    SCID_AddPP = 0x7,
    SCID_AddPPOrg = 0x8,
    SCID_StatStageUp = 0x9,
    SCID_StatStageDown = 0xA,
    SCID_StatStageSetAll = 0xB,
    SCID_StatStageRecover = 0xC,
    SCID_StatStageReset = 0xD,
    SCID_AddCritStage = 0xE,
    SCID_SetMoveCondition = 0xF,
    SCID_CureStatusCondition = 0x10,
    SCID_CureMoveCondition = 0x11,
    SCID_SwitchIn = 0x12,
    SCID_SetRealStat = 0x13,
    SCID_SetWeight = 0x14,
    SCID_ChangeType = 0x16,
    SCID_MoveConditionTurnCheck = 0x15,
    SCID_ConsumeItem = 0x17,
    SCID_UpdateUsedMove = 0x18,
    SCID_SetContinuationFlag = 0x19,
    SCID_ResetContinuationFlag = 0x1A,
    SCID_SetTurnFlag = 0x1B,
    SCID_ResetTurnFlag = 0x1C,
    SCID_ChangeAbility = 0x1D,
    SCID_SetItem = 0x1E,
    SCID_UpdateMoveID = 0x1F,
    SCID_SwitchOutClear = 0x20,
    SCID_AddFieldEffect = 0x21,
    SCID_AddFieldEffectDepend = 0x22,
    SCID_RemoveFieldEffectDepend = 0x23,
    SCID_RemoveFieldEffect = 0x24,
    SCID_SetPokeCounter = 0x25,
    SCID_BatonPass = 0x26,
    SCID_CreateSubstitute = 0x27,
    SCID_RemoveSubstitute = 0x28,
    SCID_sub_21B9088 = 0x29,
    SCID_SetIllusion = 0x2A,
    SCID_ClearConsumedItem = 0x2B,
    SCID_CureMoveConditionDependPoke = 0x2C,
    SCID_AddMoveDamage = 0x2D,
    SCID_TurnCheck = 0x2E,
    SCID_TurnCheckField = 0x2F,
    SCID_sub_21B7A44 = 0x43,
    SCID_sub_21B7AA0 = 0x44,
    SCID_Experience = 0x45,
    SCID_BallThrow = 0x46,
    SCID_sub_21B857C = 0x47,
    SCID_sub_21B85E4 = 0x48,
    SCID_ChangeAbility_0 = 0x49,
    SCID_SwapAbility = 0x4A,
    SCID_IllusionBreak = 0x4B,
    SCID_SimpleAnim = 0x4C,
    SCID_AnimByPos = 0x4D,
    SCID_AnimByVector = 0x4E,
    SCID_ChangeForm = 0x4F,
    SCID_Move = 0x50,
    SCID_SubstituteCreate = 0x51,
    SCID_SubstituteDelete = 0x52,
    SCID_Transform = 0x53,
    SCID_SubstituteDamage = 0x54,
    SCID_PlayWinBGM = 0x55,
    SCID_HideMessageWindow = 0x56,
};

enum MoveCondition
#ifdef __cplusplus
    : u32
#endif
{
    CONDITION_NONE = 0,
    CONDITION_PARALYSIS = 1,
    CONDITION_SLEEP = 2,
    CONDITION_FREEZE = 3,
    CONDITION_BURN = 4,
    CONDITION_POISON = 5,
    CONDITION_CONFUSION = 6,
    CONDITION_INFATUATION = 7,
    CONDITION_BIND = 8,
    CONDITION_NIGHTMARE = 9, // Not used
    CONDITION_CURSE = 0xA,
    CONDITION_TAUNT = 0xB,
    CONDITION_TORMENT = 0xC, // Not currently used
    CONDITION_DISABLEMOVE = 0xD,
    CONDITION_DROWSY = 0xE,
    CONDITION_HEALBLOCK = 0xF,
    CONDITION_GASTROACID = 0x10,
    CONDITION_FORESIGHT = 0x11, // Not used
    CONDITION_LEECHSEED = 0x12,
    CONDITION_EMBARGO = 0x13, // Not used
    CONDITION_PERISHSONG = 0x14,
    CONDITION_INGRAIN = 0x15,
    CONDITION_BLOCK = 0x16, // Not used
    CONDITION_ENCORE = 0x17,
    CONDITION_ROOST = 0x18,
    CONDITION_MOVELOCK = 0x19,
    CONDITION_CHARGELOCK = 0x1A,
    CONDITION_CHOICELOCK = 0x1B,
    CONDITION_MUSTHIT = 0x1C,
    CONDITION_LOCKON = 0x1D,
    CONDITION_FLOATING = 0x1E,
    CONDITION_KNOCKEDDOWN = 0x1F,
    CONDITION_TERA = 0x20,
    CONDITION_SKYDROP = 0x21,
    CONDITION_ACCURACYUP = 0x22,
    CONDITION_AQUARING = 0x23,
    CONDITION_24 = 0x24 // ????
};

enum Types
#ifdef __cplusplus
    : u8
#endif
{
    TYPE_NORMAL = 0,
    TYPE_FIGHTING = 1,
    TYPE_FLYING = 2,
    TYPE_POISON = 3,
    TYPE_GROUND = 4,
    TYPE_ROCK = 5,
    TYPE_BUG = 6,
    TYPE_GHOST = 7,
    TYPE_STEEL = 8,
    TYPE_FIRE = 9,
    TYPE_WATER = 10,
    TYPE_GRASS = 11,
    TYPE_ELECTRIC = 12,
    TYPE_PSYCHIC = 13,
    TYPE_ICE = 14,
    TYPE_DRAGON = 15,
    TYPE_DARK = 16,
    TYPE_FAIRY = 17,
    TYPE_NONE = 18,
};

enum WeatherID
#ifdef __cplusplus
    : u32
#endif
{
    WEATHER_NULL = 0,
    WEATHER_SUN = 1,
    WEATHER_RAIN = 2,
    WEATHER_HAIL = 3,
    WEATHER_SAND = 4,
};

enum BattleStyle
#ifdef __cplusplus
    : u32
#endif
{
    BTL_STYLE_SINGLE = 0,
    BTL_STYLE_DOUBLE = 1,
    BTL_STYLE_TRIPLE = 2,
    BTL_STYLE_ROTATION = 3
};

enum ItemID
{
    IT_NULL = 0x0,
    IT0001_MASTER_BALL = 0x1,
    IT0002_ULTRA_BALL = 0x2,
    IT0003_GREAT_BALL = 0x3,
    IT0004_POKE_BALL = 0x4,
    IT0005_SAFARI_BALL = 0x5,
    IT0006_NET_BALL = 0x6,
    IT0007_DIVE_BALL = 0x7,
    IT0008_NEST_BALL = 0x8,
    IT0009_REPEAT_BALL = 0x9,
    IT0010_TIMER_BALL = 0xA,
    IT0011_LUXURY_BALL = 0xB,
    IT0012_PREMIER_BALL = 0xC,
    IT0013_DUSK_BALL = 0xD,
    IT0014_HEAL_BALL = 0xE,
    IT0015_QUICK_BALL = 0xF,
    IT0016_CHERISH_BALL = 0x10,
    IT0017_POTION = 0x11,
    IT0018_ANTIDOTE = 0x12,
    IT0019_BURN_HEAL = 0x13,
    IT0020_ICE_HEAL = 0x14,
    IT0021_AWAKENING = 0x15,
    IT0022_PARALYZE_HEAL = 0x16,
    IT0023_FULL_RESTORE = 0x17,
    IT0024_MAX_POTION = 0x18,
    IT0025_HYPER_POTION = 0x19,
    IT0026_SUPER_POTION = 0x1A,
    IT0027_FULL_HEAL = 0x1B,
    IT0028_REVIVE = 0x1C,
    IT0029_MAX_REVIVE = 0x1D,
    IT0030_FRESH_WATER = 0x1E,
    IT0031_SODA_POP = 0x1F,
    IT0032_LEMONADE = 0x20,
    IT0033_MOOMOO_MILK = 0x21,
    IT0034_ENERGY_POWDER = 0x22,
    IT0035_ENERGY_ROOT = 0x23,
    IT0036_HEAL_POWDER = 0x24,
    IT0037_REVIVAL_HERB = 0x25,
    IT0038_ETHER = 0x26,
    IT0039_MAX_ETHER = 0x27,
    IT0040_ELIXIR = 0x28,
    IT0041_MAX_ELIXIR = 0x29,
    IT0042_LAVA_COOKIE = 0x2A,
    IT0043_BERRY_JUICE = 0x2B,
    IT0044_SACRED_ASH = 0x2C,
    IT0045_HP_UP = 0x2D,
    IT0046_PROTEIN = 0x2E,
    IT0047_UNUSUAL_CANDY = 0x2F,
    IT0048_CARBOS = 0x30,
    IT0049_CALCIUM = 0x31,
    IT0050_RARE_CANDY = 0x32,
    IT0051_PP_UP = 0x33,
    IT0052_ZINC = 0x34,
    IT0053_PP_MAX = 0x35,
    IT0054_OLD_GATEAU = 0x36,
    IT0055_GUARD_SPEC = 0x37,
    IT0056_DIRE_HIT = 0x38,
    IT0057_X_ATTACK = 0x39,
    IT0058_X_DEFENSE = 0x3A,
    IT0059_X_SPEED = 0x3B,
    IT0060_X_ACCURACY = 0x3C,
    IT0061_X_SP_ATK = 0x3D,
    IT0062_X_SP_DEF = 0x3E,
    IT0063_POKE_DOLL = 0x3F,
    IT0064_FLUFFY_TAIL = 0x40,
    IT0065_BLUE_FLUTE = 0x41,
    IT0066_YELLOW_FLUTE = 0x42,
    IT0067_RED_FLUTE = 0x43,
    IT0068_BLACK_FLUTE = 0x44,
    IT0069_WHITE_FLUTE = 0x45,
    IT0070_SHOAL_SALT = 0x46,
    IT0071_SHOAL_SHELL = 0x47,
    IT0072_RED_SHARD = 0x48,
    IT0073_BLUE_SHARD = 0x49,
    IT0074_YELLOW_SHARD = 0x4A,
    IT0075_GREEN_SHARD = 0x4B,
    IT0076_SUPER_REPEL = 0x4C,
    IT0077_MAX_REPEL = 0x4D,
    IT0078_ESCAPE_ROPE = 0x4E,
    IT0079_REPEL = 0x4F,
    IT0080_SUN_STONE = 0x50,
    IT0081_MOON_STONE = 0x51,
    IT0082_FIRE_STONE = 0x52,
    IT0083_THUNDER_STONE = 0x53,
    IT0084_WATER_STONE = 0x54,
    IT0085_LEAF_STONE = 0x55,
    IT0086_TINY_MUSHROOM = 0x56,
    IT0087_BIG_MUSHROOM = 0x57,
    IT0088_PEARL = 0x58,
    IT0089_BIG_PEARL = 0x59,
    IT0090_STARDUST = 0x5A,
    IT0091_STAR_PIECE = 0x5B,
    IT0092_NUGGET = 0x5C,
    IT0093_HEART_SCALE = 0x5D,
    IT0094_HONEY = 0x5E,
    IT0095_GROWTH_MULCH = 0x5F,
    IT0096_DAMP_MULCH = 0x60,
    IT0097_STABLE_MULCH = 0x61,
    IT0098_GOOEY_MULCH = 0x62,
    IT0099_ROOT_FOSSIL = 0x63,
    IT0100_CLAW_FOSSIL = 0x64,
    IT0101_HELIX_FOSSIL = 0x65,
    IT0102_DOME_FOSSIL = 0x66,
    IT0103_OLD_AMBER = 0x67,
    IT0104_ARMOR_FOSSIL = 0x68,
    IT0105_SKULL_FOSSIL = 0x69,
    IT0106_RARE_BONE = 0x6A,
    IT0107_SHINY_STONE = 0x6B,
    IT0108_DUSK_STONE = 0x6C,
    IT0109_DAWN_STONE = 0x6D,
    IT0110_OVAL_STONE = 0x6E,
    IT0111_ODD_KEYSTONE = 0x6F,
    IT0112_THROAT_SPRAY = 0x70,
    IT0113 = 0x71,
    IT0114 = 0x72,
    IT0115 = 0x73,
    IT0116_DOUSE_DRIVE = 0x74,
    IT0117_SHOCK_DRIVE = 0x75,
    IT0118_BURN_DRIVE = 0x76,
    IT0119_CHILL_DRIVE = 0x77,
    IT0120 = 0x78,
    IT0121 = 0x79,
    IT0122 = 0x7A,
    IT0123 = 0x7B,
    IT0124 = 0x7C,
    IT0125 = 0x7D,
    IT0126 = 0x7E,
    IT0127 = 0x7F,
    IT0128 = 0x80,
    IT0129 = 0x81,
    IT0130 = 0x82,
    IT0131 = 0x83,
    IT0132 = 0x84,
    IT0133 = 0x85,
    IT0134_SWEET_HEART = 0x86,
    IT0135_FAIRY_DUST = 0x87,
    IT0136_TRICKSTER_HERB = 0x88,
    IT0137_GREET_MAIL = 0x89,
    IT0138_FAVORED_MAIL = 0x8A,
    IT0139_RSVP_MAIL = 0x8B,
    IT0140_THANKS_MAIL = 0x8C,
    IT0141_INQUIRY_MAIL = 0x8D,
    IT0142_LIKE_MAIL = 0x8E,
    IT0143_REPLY_MAIL = 0x8F,
    IT0144_BRIDGE_MAIL_S = 0x90,
    IT0145_BRIDGE_MAIL_D = 0x91,
    IT0146_BRIDGE_MAIL_T = 0x92,
    IT0147_BRIDGE_MAIL_V = 0x93,
    IT0148_BRIDGE_MAIL_M = 0x94,
    IT0149_CHERI_BERRY = 0x95,
    IT0150_CHESTO_BERRY = 0x96,
    IT0151_PECHA_BERRY = 0x97,
    IT0152_RAWST_BERRY = 0x98,
    IT0153_ASPEAR_BERRY = 0x99,
    IT0154_LEPPA_BERRY = 0x9A,
    IT0155_ORAN_BERRY = 0x9B,
    IT0156_PERSIM_BERRY = 0x9C,
    IT0157_LUM_BERRY = 0x9D,
    IT0158_SITRUS_BERRY = 0x9E,
    IT0159_FIGY_BERRY = 0x9F,
    IT0160_MARANGA_BERRY = 0xA0,
    IT0161_MAGO_BERRY = 0xA1,
    IT0162_KEE_BERRY = 0xA2,
    IT0163_IAPAPA_BERRY = 0xA3,
    IT0164_RAZZ_BERRY = 0xA4,
    IT0165_BLUK_BERRY = 0xA5,
    IT0166_NANAB_BERRY = 0xA6,
    IT0167_WEPEAR_BERRY = 0xA7,
    IT0168_PINAP_BERRY = 0xA8,
    IT0169_POMEG_BERRY = 0xA9,
    IT0170_KELPSY_BERRY = 0xAA,
    IT0171_QUALOT_BERRY = 0xAB,
    IT0172_HONDEW_BERRY = 0xAC,
    IT0173_GREPA_BERRY = 0xAD,
    IT0174_TAMATO_BERRY = 0xAE,
    IT0175_CORNN_BERRY = 0xAF,
    IT0176_MAGOST_BERRY = 0xB0,
    IT0177_RABUTA_BERRY = 0xB1,
    IT0178_NOMEL_BERRY = 0xB2,
    IT0179_SPELON_BERRY = 0xB3,
    IT0180_PAMTRE_BERRY = 0xB4,
    IT0181_WATMEL_BERRY = 0xB5,
    IT0182_DURIN_BERRY = 0xB6,
    IT0183_BELUE_BERRY = 0xB7,
    IT0184_OCCA_BERRY = 0xB8,
    IT0185_PASSHO_BERRY = 0xB9,
    IT0186_WACAN_BERRY = 0xBA,
    IT0187_RINDO_BERRY = 0xBB,
    IT0188_YACHE_BERRY = 0xBC,
    IT0189_CHOPLE_BERRY = 0xBD,
    IT0190_KEBIA_BERRY = 0xBE,
    IT0191_SHUCA_BERRY = 0xBF,
    IT0192_COBA_BERRY = 0xC0,
    IT0193_PAYAPA_BERRY = 0xC1,
    IT0194_TANGA_BERRY = 0xC2,
    IT0195_CHARTI_BERRY = 0xC3,
    IT0196_KASIB_BERRY = 0xC4,
    IT0197_HABAN_BERRY = 0xC5,
    IT0198_COLBUR_BERRY = 0xC6,
    IT0199_BABIRI_BERRY = 0xC7,
    IT0200_CHILAN_BERRY = 0xC8,
    IT0201_LIECHI_BERRY = 0xC9,
    IT0202_GANLON_BERRY = 0xCA,
    IT0203_SALAC_BERRY = 0xCB,
    IT0204_PETAYA_BERRY = 0xCC,
    IT0205_APICOT_BERRY = 0xCD,
    IT0206_ROSELI_BERRY = 0xCE,
    IT0207_STARF_BERRY = 0xCF,
    IT0208_ENIGMA_BERRY = 0xD0,
    IT0209_MICLE_BERRY = 0xD1,
    IT0210_CUSTAP_BERRY = 0xD2,
    IT0211_JABOCA_BERRY = 0xD3,
    IT0212_ROWAP_BERRY = 0xD4,
    IT0213_BRIGHT_POWDER = 0xD5,
    IT0214_WHITE_HERB = 0xD6,
    IT0215_TERA_BADGE = 0xD7,
    IT0216_EXP_SHARE = 0xD8,
    IT0217_QUICK_CLAW = 0xD9,
    IT0218_SOOTHE_BELL = 0xDA,
    IT0219_MENTAL_HERB = 0xDB,
    IT0220_CHOICE_BAND = 0xDC,
    IT0221_KING_S_ROCK = 0xDD,
    IT0222_SILVER_POWDER = 0xDE,
    IT0223_STATIC_ORB = 0xDF,
    IT0224_CLEANSE_TAG = 0xE0,
    IT0225_MASCOT_BADGE = 0xE1,
    IT0226_DEEP_SEA_TOOTH = 0xE2,
    IT0227_DEEP_SEA_SCALE = 0xE3,
    IT0228_PROTECTIVE_GEAR = 0xE4,
    IT0229_EVERSTONE = 0xE5,
    IT0230_FOCUS_BAND = 0xE6,
    IT0231_LUCKY_EGG = 0xE7,
    IT0232_SCOPE_LENS = 0xE8,
    IT0233_METAL_COAT = 0xE9,
    IT0234_LEFTOVERS = 0xEA,
    IT0235_DRAGON_SCALE = 0xEB,
    IT0236_LIGHT_BALL = 0xEC,
    IT0237_SOFT_SAND = 0xED,
    IT0238_HARD_STONE = 0xEE,
    IT0239_MIRACLE_SEED = 0xEF,
    IT0240_BLACK_GLASSES = 0xF0,
    IT0241_BLACK_BELT = 0xF1,
    IT0242_MAGNET = 0xF2,
    IT0243_MYSTIC_WATER = 0xF3,
    IT0244_SHARP_BEAK = 0xF4,
    IT0245_POISON_BARB = 0xF5,
    IT0246_NEVER_MELT_ICE = 0xF6,
    IT0247_SPELL_TAG = 0xF7,
    IT0248_TWISTED_SPOON = 0xF8,
    IT0249_CHARCOAL = 0xF9,
    IT0250_DRAGON_FANG = 0xFA,
    IT0251_SILK_SCARF = 0xFB,
    IT0252_UP_GRADE = 0xFC,
    IT0253_SHELL_BELL = 0xFD,
    IT0254_PROTO_ARMOR = 0xFE,
    IT0255_ATTACK_INSURANCE = 0xFF,
    IT0256_BLUNDER_POLICY = 0x100,
    IT0257_STRESS_TESTER = 0x101,
    IT0258_THICK_CLUB = 0x102,
    IT0259_STICK = 0x103,
    IT0260_RED_SCARF = 0x104,
    IT0261_BLUE_SCARF = 0x105,
    IT0262_PINK_SCARF = 0x106,
    IT0263_GREEN_SCARF = 0x107,
    IT0264_YELLOW_SCARF = 0x108,
    IT0265_WIDE_LENS = 0x109,
    IT0266_MUSCLE_BAND = 0x10A,
    IT0267_WISE_GLASSES = 0x10B,
    IT0268_EXPERT_BELT = 0x10C,
    IT0269_LIGHT_CLAY = 0x10D,
    IT0270_LIFE_ORB = 0x10E,
    IT0271_POWER_HERB = 0x10F,
    IT0272_TOXIC_ORB = 0x110,
    IT0273_FLAME_ORB = 0x111,
    IT0274_MYSTERY_DEVICE = 0x112,
    IT0275_FOCUS_SASH = 0x113,
    IT0276_ZOOM_LENS = 0x114,
    IT0277_METRONOME = 0x115,
    IT0278_IRON_BALL = 0x116,
    IT0279_LAGGING_TAIL = 0x117,
    IT0280_CLEAR_AMULET = 0x118,
    IT0281_BLACK_SLUDGE = 0x119,
    IT0282_ICY_ROCK = 0x11A,
    IT0283_SMOOTH_ROCK = 0x11B,
    IT0284_HEAT_ROCK = 0x11C,
    IT0285_DAMP_ROCK = 0x11D,
    IT0286_CLRS_ARMOR = 0x11E,
    IT0287_CHOICE_SCARF = 0x11F,
    IT0288_STICKY_BARB = 0x120,
    IT0289_ASSAULT_VEST = 0x121,
    IT0290_FAIRY_GEM = 0x122,
    IT0291_WEAKNESS_POLICY = 0x123,
    IT0292_CLRS_BOOSTER = 0x124,
    IT0293_SAFETY_GOGGLES = 0x125,
    IT0294_PROTO_BOOSTER = 0x126,
    IT0295_SHED_SHELL = 0x127,
    IT0296_BIG_ROOT = 0x128,
    IT0297_CHOICE_SPECS = 0x129,
    IT0298_TERA_SPECS = 0x12A,
    IT0299_TERA_C_BAND = 0x12B,
    IT0300_TERA_SCARF = 0x12C,
    IT0301_TERA_ORB = 0x12D,
    IT0302_TERA_SASH = 0x12E,
    IT0303_TERA_F_BAND = 0x12F,
    IT0304_TERA_CLAW = 0x130,
    IT0305_TERA_W_POLICY = 0x131,
    IT0306_TERA_B_POLICY = 0x132,
    IT0307_TERA_POWDER = 0x133,
    IT0308_TERA_VEST = 0x134,
    IT0309_TERA_INSURANCE = 0x135,
    IT0310_TERA_BELT = 0x136,
    IT0311_TERA_LEFTOVERS = 0x137,
    IT0312_TERA_DICE = 0x138,
    IT0313_TERA_K_ROCK = 0x139,
    IT0314_CLRS_INVENTION = 0x13A,
    IT0315_PROTO_ACCELERATOR = 0x13B,
    IT0316_FULL_INCENSE = 0x13C,
    IT0317_LOADED_DICE = 0x13D,
    IT0318_CLRS_ACCELERATOR = 0x13E,
    IT0319_LUCK_INCENSE = 0x13F,
    IT0320_PURE_INCENSE = 0x140,
    IT0321_PROTECTOR = 0x141,
    IT0322_ELECTIRIZER = 0x142,
    IT0323_MAGMARIZER = 0x143,
    IT0324_DUBIOUS_DISC = 0x144,
    IT0325_REAPER_CLOTH = 0x145,
    IT0326_RAZOR_CLAW = 0x146,
    IT0327_RAZOR_FANG = 0x147,
    IT0328_TM01 = 0x148,
    IT0329_TM02 = 0x149,
    IT0330_TM03 = 0x14A,
    IT0331_TM04 = 0x14B,
    IT0332_TM05 = 0x14C,
    IT0333_TM06 = 0x14D,
    IT0334_TM07 = 0x14E,
    IT0335_TM08 = 0x14F,
    IT0336_TM09 = 0x150,
    IT0337_TM10 = 0x151,
    IT0338_TM11 = 0x152,
    IT0339_TM12 = 0x153,
    IT0340_TM13 = 0x154,
    IT0341_TM14 = 0x155,
    IT0342_TM15 = 0x156,
    IT0343_TM16 = 0x157,
    IT0344_TM17 = 0x158,
    IT0345_TM18 = 0x159,
    IT0346_TM19 = 0x15A,
    IT0347_TM20 = 0x15B,
    IT0348_TM21 = 0x15C,
    IT0349_TM22 = 0x15D,
    IT0350_TM23 = 0x15E,
    IT0351_TM24 = 0x15F,
    IT0352_TM25 = 0x160,
    IT0353_TM26 = 0x161,
    IT0354_TM27 = 0x162,
    IT0355_TM28 = 0x163,
    IT0356_TM29 = 0x164,
    IT0357_TM30 = 0x165,
    IT0358_TM31 = 0x166,
    IT0359_TM32 = 0x167,
    IT0360_TM33 = 0x168,
    IT0361_TM34 = 0x169,
    IT0362_TM35 = 0x16A,
    IT0363_TM36 = 0x16B,
    IT0364_TM37 = 0x16C,
    IT0365_TM38 = 0x16D,
    IT0366_TM39 = 0x16E,
    IT0367_TM40 = 0x16F,
    IT0368_TM41 = 0x170,
    IT0369_TM42 = 0x171,
    IT0370_TM43 = 0x172,
    IT0371_TM44 = 0x173,
    IT0372_TM45 = 0x174,
    IT0373_TM46 = 0x175,
    IT0374_TM47 = 0x176,
    IT0375_TM48 = 0x177,
    IT0376_TM49 = 0x178,
    IT0377_TM50 = 0x179,
    IT0378_TM51 = 0x17A,
    IT0379_TM52 = 0x17B,
    IT0380_TM53 = 0x17C,
    IT0381_TM54 = 0x17D,
    IT0382_TM55 = 0x17E,
    IT0383_TM56 = 0x17F,
    IT0384_TM57 = 0x180,
    IT0385_TM58 = 0x181,
    IT0386_TM59 = 0x182,
    IT0387_TM60 = 0x183,
    IT0388_TM61 = 0x184,
    IT0389_TM62 = 0x185,
    IT0390_TM63 = 0x186,
    IT0391_TM64 = 0x187,
    IT0392_TM65 = 0x188,
    IT0393_TM66 = 0x189,
    IT0394_TM67 = 0x18A,
    IT0395_TM68 = 0x18B,
    IT0396_TM69 = 0x18C,
    IT0397_TM70 = 0x18D,
    IT0398_TM71 = 0x18E,
    IT0399_TM72 = 0x18F,
    IT0400_TM73 = 0x190,
    IT0401_TM74 = 0x191,
    IT0402_TM75 = 0x192,
    IT0403_TM76 = 0x193,
    IT0404_TM77 = 0x194,
    IT0405_TM78 = 0x195,
    IT0406_TM79 = 0x196,
    IT0407_TM80 = 0x197,
    IT0408_TM81 = 0x198,
    IT0409_TM82 = 0x199,
    IT0410_TM83 = 0x19A,
    IT0411_TM84 = 0x19B,
    IT0412_TM85 = 0x19C,
    IT0413_TM86 = 0x19D,
    IT0414_TM87 = 0x19E,
    IT0415_TM88 = 0x19F,
    IT0416_TM89 = 0x1A0,
    IT0417_TM90 = 0x1A1,
    IT0418_TM91 = 0x1A2,
    IT0419_TM92 = 0x1A3,
    IT0420_HM01 = 0x1A4,
    IT0421_HM02 = 0x1A5,
    IT0422_HM03 = 0x1A6,
    IT0423_HM04 = 0x1A7,
    IT0424_HM05 = 0x1A8,
    IT0425_HM06 = 0x1A9,
    IT0426 = 0x1AA,
    IT0427 = 0x1AB,
    IT0428_EXPLORER_KIT = 0x1AC,
    IT0429_LOOT_SACK = 0x1AD,
    IT0430_RULE_BOOK = 0x1AE,
    IT0431_POKE_RADAR = 0x1AF,
    IT0432_POINT_CARD = 0x1B0,
    IT0433_JOURNAL = 0x1B1,
    IT0434_SEAL_CASE = 0x1B2,
    IT0435_FASHION_CASE = 0x1B3,
    IT0436_SEAL_BAG = 0x1B4,
    IT0437_PAL_PAD = 0x1B5,
    IT0438_WORKS_KEY = 0x1B6,
    IT0439_OLD_CHARM = 0x1B7,
    IT0440_GALACTIC_KEY = 0x1B8,
    IT0441_RED_CHAIN = 0x1B9,
    IT0442_TOWN_MAP = 0x1BA,
    IT0443_VS_SEEKER = 0x1BB,
    IT0444_COIN_CASE = 0x1BC,
    IT0445_OLD_ROD = 0x1BD,
    IT0446_GOOD_ROD = 0x1BE,
    IT0447_SUPER_ROD = 0x1BF,
    IT0448_SPRAYDUCK = 0x1C0,
    IT0449_POFFIN_CASE = 0x1C1,
    IT0450_BIKE = 0x1C2,
    IT0451_SUITE_KEY = 0x1C3,
    IT0452_OAK_S_LETTER = 0x1C4,
    IT0453_LUNAR_WING = 0x1C5,
    IT0454_MEMBER_CARD = 0x1C6,
    IT0455_AZURE_FLUTE = 0x1C7,
    IT0456_S_S_TICKET = 0x1C8,
    IT0457_CONTEST_PASS = 0x1C9,
    IT0458_MAGMA_STONE = 0x1CA,
    IT0459_PARCEL = 0x1CB,
    IT0460_COUPON_1 = 0x1CC,
    IT0461_COUPON_2 = 0x1CD,
    IT0462_COUPON_3 = 0x1CE,
    IT0463_STORAGE_KEY = 0x1CF,
    IT0464_SECRET_POTION = 0x1D0,
    IT0465_VS_RECORDER = 0x1D1,
    IT0466_GRACIDEA = 0x1D2,
    IT0467_SECRET_KEY = 0x1D3,
    IT0468_APRICORN_BOX = 0x1D4,
    IT0469_UNOWN_REPORT = 0x1D5,
    IT0470_BERRY_POTS = 0x1D6,
    IT0471_DOWSING_MACHINE = 0x1D7,
    IT0472_BLUE_CARD = 0x1D8,
    IT0473_SLOWPOKE_TAIL = 0x1D9,
    IT0474_CLEAR_BELL = 0x1DA,
    IT0475_CARD_KEY = 0x1DB,
    IT0476_BASEMENT_KEY = 0x1DC,
    IT0477_SQUIRT_BOTTLE = 0x1DD,
    IT0478_RED_SCALE = 0x1DE,
    IT0479_LOST_ITEM = 0x1DF,
    IT0480_PASS = 0x1E0,
    IT0481_MACHINE_PART = 0x1E1,
    IT0482_SILVER_WING = 0x1E2,
    IT0483_RAINBOW_WING = 0x1E3,
    IT0484_MYSTERY_EGG = 0x1E4,
    IT0485_RED_APRICORN = 0x1E5,
    IT0486_BLUE_APRICORN = 0x1E6,
    IT0487_YELLOW_APRICORN = 0x1E7,
    IT0488_GREEN_APRICORN = 0x1E8,
    IT0489_PINK_APRICORN = 0x1E9,
    IT0490_WHITE_APRICORN = 0x1EA,
    IT0491_BLACK_APRICORN = 0x1EB,
    IT0492_FAST_BALL = 0x1EC,
    IT0493_LEVEL_BALL = 0x1ED,
    IT0494_LURE_BALL = 0x1EE,
    IT0495_HEAVY_BALL = 0x1EF,
    IT0496_LOVE_BALL = 0x1F0,
    IT0497_FRIEND_BALL = 0x1F1,
    IT0498_MOON_BALL = 0x1F2,
    IT0499_SPORT_BALL = 0x1F3,
    IT0500_PARK_BALL = 0x1F4,
    IT0501_PHOTO_ALBUM = 0x1F5,
    IT0502_GB_SOUNDS = 0x1F6,
    IT0503_TIDAL_BELL = 0x1F7,
    IT0504_RAGE_CANDY_BAR = 0x1F8,
    IT0505_DATA_CARD_01 = 0x1F9,
    IT0506_DATA_CARD_02 = 0x1FA,
    IT0507_DATA_CARD_03 = 0x1FB,
    IT0508_DATA_CARD_04 = 0x1FC,
    IT0509_DATA_CARD_05 = 0x1FD,
    IT0510_DATA_CARD_06 = 0x1FE,
    IT0511_DATA_CARD_07 = 0x1FF,
    IT0512_DATA_CARD_08 = 0x200,
    IT0513_DATA_CARD_09 = 0x201,
    IT0514_DATA_CARD_10 = 0x202,
    IT0515_DATA_CARD_11 = 0x203,
    IT0516_DATA_CARD_12 = 0x204,
    IT0517_DATA_CARD_13 = 0x205,
    IT0518_DATA_CARD_14 = 0x206,
    IT0519_DATA_CARD_15 = 0x207,
    IT0520_DATA_CARD_16 = 0x208,
    IT0521_DATA_CARD_17 = 0x209,
    IT0522_DATA_CARD_18 = 0x20A,
    IT0523_DATA_CARD_19 = 0x20B,
    IT0524_DATA_CARD_20 = 0x20C,
    IT0525_DATA_CARD_21 = 0x20D,
    IT0526_DATA_CARD_22 = 0x20E,
    IT0527_DATA_CARD_23 = 0x20F,
    IT0528_DATA_CARD_24 = 0x210,
    IT0529_DATA_CARD_25 = 0x211,
    IT0530_DATA_CARD_26 = 0x212,
    IT0531_DATA_CARD_27 = 0x213,
    IT0532_JADE_ORB = 0x214,
    IT0533_LOCK_CAPSULE = 0x215,
    IT0534_RED_ORB = 0x216,
    IT0535_BLUE_ORB = 0x217,
    IT0536_ENIGMA_STONE = 0x218,
    IT0537_PRISM_SCALE = 0x219,
    IT0538_EVIOLITE = 0x21A,
    IT0539_EJECT_PACK = 0x21B,
    IT0540_ROCKY_HELMET = 0x21C,
    IT0541_AIR_BALLOON = 0x21D,
    IT0542_RED_CARD = 0x21E,
    IT0543_COVERT_CLOAK = 0x21F,
    IT0544_UTILITY_UMBRELLA = 0x220,
    IT0545_ABSORB_BULB = 0x221,
    IT0546_CELL_BATTERY = 0x222,
    IT0547_EJECT_BUTTON = 0x223,
    IT0548_FIRE_GEM = 0x224,
    IT0549_WATER_GEM = 0x225,
    IT0550_ELECTRIC_GEM = 0x226,
    IT0551_GRASS_GEM = 0x227,
    IT0552_ICE_GEM = 0x228,
    IT0553_FIGHTING_GEM = 0x229,
    IT0554_POISON_GEM = 0x22A,
    IT0555_GROUND_GEM = 0x22B,
    IT0556_FLYING_GEM = 0x22C,
    IT0557_PSYCHIC_GEM = 0x22D,
    IT0558_BUG_GEM = 0x22E,
    IT0559_ROCK_GEM = 0x22F,
    IT0560_GHOST_GEM = 0x230,
    IT0561_DRAGON_GEM = 0x231,
    IT0562_DARK_GEM = 0x232,
    IT0563_STEEL_GEM = 0x233,
    IT0564_NORMAL_GEM = 0x234,
    IT0565_HEALTH_WING = 0x235,
    IT0566_MUSCLE_WING = 0x236,
    IT0567_RESIST_WING = 0x237,
    IT0568_GENIUS_WING = 0x238,
    IT0569_CLEVER_WING = 0x239,
    IT0570_SWIFT_WING = 0x23A,
    IT0571_PRETTY_WING = 0x23B,
    IT0572_COVER_FOSSIL = 0x23C,
    IT0573_PLUME_FOSSIL = 0x23D,
    IT0574_LIBERTY_PASS = 0x23E,
    IT0575_PASS_ORB = 0x23F,
    IT0576_DREAM_BALL = 0x240,
    IT0577_POKE_TOY = 0x241,
    IT0578_PROP_CASE = 0x242,
    IT0579_DRAGON_SKULL = 0x243,
    IT0580_BALM_MUSHROOM = 0x244,
    IT0581_BIG_NUGGET = 0x245,
    IT0582_PEARL_STRING = 0x246,
    IT0583_COMET_SHARD = 0x247,
    IT0584_RELIC_COPPER = 0x248,
    IT0585_RELIC_SILVER = 0x249,
    IT0586_RELIC_GOLD = 0x24A,
    IT0587_RELIC_VASE = 0x24B,
    IT0588_RELIC_BAND = 0x24C,
    IT0589_RELIC_STATUE = 0x24D,
    IT0590_RELIC_CROWN = 0x24E,
    IT0591_CASTELIACONE = 0x24F,
    IT0592_DIRE_HIT_2 = 0x250,
    IT0593_X_SPEED_2 = 0x251,
    IT0594_X_SP_ATK_2 = 0x252,
    IT0595_X_SP_DEF_2 = 0x253,
    IT0596_X_DEFENSE_2 = 0x254,
    IT0597_X_ATTACK_2 = 0x255,
    IT0598_X_ACCURACY_2 = 0x256,
    IT0599_X_SPEED_3 = 0x257,
    IT0600_X_SP_ATK_3 = 0x258,
    IT0601_X_SP_DEF_3 = 0x259,
    IT0602_X_DEFENSE_3 = 0x25A,
    IT0603_X_ATTACK_3 = 0x25B,
    IT0604_X_ACCURACY_3 = 0x25C,
    IT0605_X_SPEED_6 = 0x25D,
    IT0606_X_SP_ATK_6 = 0x25E,
    IT0607_X_SP_DEF_6 = 0x25F,
    IT0608_X_DEFENSE_6 = 0x260,
    IT0609_X_ATTACK_6 = 0x261,
    IT0610_X_ACCURACY_6 = 0x262,
    IT0611_ABILITY_URGE = 0x263,
    IT0612_ITEM_DROP = 0x264,
    IT0613_ITEM_URGE = 0x265,
    IT0614_RESET_URGE = 0x266,
    IT0615_DIRE_HIT_3 = 0x267,
    IT0616_LIGHT_STONE = 0x268,
    IT0617_DARK_STONE = 0x269,
    IT0618_TM93 = 0x26A,
    IT0619_TM94 = 0x26B,
    IT0620_TM95 = 0x26C,
    IT0621_XTRANSCEIVER = 0x26D,
    IT0622 = 0x26E,
    IT0623_GRAM_1 = 0x26F,
    IT0624_GRAM_2 = 0x270,
    IT0625_GRAM_3 = 0x271,
    IT0626_XTRANSCEIVER = 0x272,
    IT0627_MEDAL_BOX = 0x273,
    IT0628_DNA_SPLICERS = 0x274,
    IT0629_DNA_SPLICERS = 0x275,
    IT0630_PERMIT = 0x276,
    IT0631_OVAL_CHARM = 0x277,
    IT0632_SHINY_CHARM = 0x278,
    IT0633_PLASMA_CARD = 0x279,
    IT0634_GRUBBY_HANKY = 0x27A,
    IT0635_COLRESS_MACHINE = 0x27B,
    IT0636_DROPPED_ITEM = 0x27C,
    IT0637_DROPPED_ITEM = 0x27D,
    IT0638_REVEAL_GLASS = 0x27E,
    IT0639_WEAKNESS_POLICY = 0x27F,
    IT0640_ASSAULT_VEST = 0x280,
    IT0641_HOLO_CASTER = 0x281,
    IT0642_PROF_S_LETTER = 0x282,
    IT0643_ROLLER_SKATES = 0x283,
    IT0644_PIXIE_PLATE = 0x284,
    IT0645_ABILITY_CAPSULE = 0x285,
    IT0646_WHIPPED_DREAM = 0x286,
    IT0647_SACHET = 0x287,
    IT0648_LUMINOUS_MOSS = 0x288,
    IT0649_SNOWBALL = 0x289,
    IT0650_SAFETY_GOGGLES = 0x28A,
    IT0651_POKE_FLUTE = 0x28B,
    IT0652_RICH_MULCH = 0x28C,
    IT0653_SURPRISE_MULCH = 0x28D,
    IT0654_BOOST_MULCH = 0x28E,
    IT0655_AMAZE_MULCH = 0x28F,
    IT0656_GENGARITE = 0x290,
    IT0657_GARDEVOIRITE = 0x291,
    IT0658_AMPHAROSITE = 0x292,
    IT0659_VENUSAURITE = 0x293,
    IT0660_CHARIZARDITE_X = 0x294,
    IT0661_BLASTOISINITE = 0x295,
    IT0662_MEWTWONITE_X = 0x296,
    IT0663_MEWTWONITE_Y = 0x297,
    IT0664_BLAZIKENITE = 0x298,
    IT0665_MEDICHAMITE = 0x299,
    IT0666_HOUNDOOMINITE = 0x29A,
    IT0667_AGGRONITE = 0x29B,
    IT0668_BANETTITE = 0x29C,
    IT0669_TYRANITARITE = 0x29D,
    IT0670_SCIZORITE = 0x29E,
    IT0671_PINSIRITE = 0x29F,
    IT0672_AERODACTYLITE = 0x2A0,
    IT0673_LUCARIONITE = 0x2A1,
    IT0674_ABOMASITE = 0x2A2,
    IT0675_KANGASKHANITE = 0x2A3,
    IT0676_GYARADOSITE = 0x2A4,
    IT0677_ABSOLITE = 0x2A5,
    IT0678_CHARIZARDITE_Y = 0x2A6,
    IT0679_ALAKAZITE = 0x2A7,
    IT0680_HERACRONITE = 0x2A8,
    IT0681_MAWILITE = 0x2A9,
    IT0682_MANECTITE = 0x2AA,
    IT0683_GARCHOMPITE = 0x2AB,
    IT0684_LATIASITE = 0x2AC,
    IT0685_LATIOSITE = 0x2AD,
    IT0686_ROSELI_BERRY = 0x2AE,
    IT0687_KEE_BERRY = 0x2AF,
    IT0688_MARANGA_BERRY = 0x2B0,
    IT0689_SPRINKLOTAD = 0x2B1,
    IT0690_TM96 = 0x2B2,
    IT0691_TM97 = 0x2B3,
    IT0692_TM98 = 0x2B4,
    IT0693_TM99 = 0x2B5,
    IT0694_TM100 = 0x2B6,
    IT0695_POWER_PLANT_PASS = 0x2B7,
    IT0696_MEGA_RING = 0x2B8,
    IT0697_INTRIGUING_STONE = 0x2B9,
    IT0698_COMMON_STONE = 0x2BA,
    IT0699_DISCOUNT_COUPON = 0x2BB,
    IT0700_ELEVATOR_KEY = 0x2BC,
    IT0701_TMV_PASS = 0x2BD,
    IT0702_HONOR_OF_KALOS = 0x2BE,
    IT0703_ADVENTURE_RULES = 0x2BF,
    IT0704_STRANGE_SOUVENIR = 0x2C0,
    IT0705_LENS_CASE = 0x2C1,
    IT0706_TRAVEL_TRUNK = 0x2C2,
    IT0707_TRAVEL_TRUNK = 0x2C3,
    IT0708_LUMIOSE_GALETTE = 0x2C4,
    IT0709_SHALOUR_SABLE = 0x2C5,
    IT0710_JAW_FOSSIL = 0x2C6,
    IT0711_SAIL_FOSSIL = 0x2C7,
    IT0712_LOOKER_TICKET = 0x2C8,
    IT0713_BIKE = 0x2C9,
    IT0714_HOLO_CASTER = 0x2CA,
    IT0715_FAIRY_GEM = 0x2CB,
    IT0716_MEGA_CHARM = 0x2CC,
    IT0717_MEGA_GLOVE = 0x2CD,
    IT0718_MACH_BIKE = 0x2CE,
    IT0719_ACRO_BIKE = 0x2CF,
    IT0720_WAILMER_PAIL = 0x2D0,
    IT0721_DEVON_PARTS = 0x2D1,
    IT0722_SOOT_SACK = 0x2D2,
    IT0723_BASEMENT_KEY = 0x2D3,
    IT0724_POKEBLOCK_KIT = 0x2D4,
    IT0725_LETTER = 0x2D5,
    IT0726_EON_TICKET = 0x2D6,
    IT0727_SCANNER = 0x2D7,
    IT0728_GO_GOGGLES = 0x2D8,
    IT0729_METEORITE = 0x2D9,
    IT0730_KEY_TO_ROOM_1 = 0x2DA,
    IT0731_KEY_TO_ROOM_2 = 0x2DB,
    IT0732_KEY_TO_ROOM_4 = 0x2DC,
    IT0733_KEY_TO_ROOM_6 = 0x2DD,
    IT0734_STORAGE_KEY = 0x2DE,
    IT0735_DEVON_SCOPE = 0x2DF,
    IT0736_S_S_TICKET = 0x2E0,
    IT0737_HM07 = 0x2E1,
    IT0738_DEVON_SCUBA_GEAR = 0x2E2,
    IT0739_CONTEST_COSTUME = 0x2E3,
    IT0740_CONTEST_COSTUME = 0x2E4,
    IT0741_MAGMA_SUIT = 0x2E5,
    IT0742_AQUA_SUIT = 0x2E6,
    IT0743_PAIR_OF_TICKETS = 0x2E7,
    IT0744_MEGA_BRACELET = 0x2E8,
    IT0745_MEGA_PENDANT = 0x2E9,
    IT0746_MEGA_GLASSES = 0x2EA,
    IT0747_MEGA_ANCHOR = 0x2EB,
    IT0748_MEGA_STICKPIN = 0x2EC,
    IT0749_MEGA_TIARA = 0x2ED,
    IT0750_MEGA_ANKLET = 0x2EE,
    IT0751_METEORITE = 0x2EF,
    IT0752_SWAMPERTITE = 0x2F0,
    IT0753_SCEPTILITE = 0x2F1,
    IT0754_SABLENITE = 0x2F2,
    IT0755_ALTARIANITE = 0x2F3,
    IT0756_GALLADITE = 0x2F4,
    IT0757_AUDINITE = 0x2F5,
    IT0758_METAGROSSITE = 0x2F6,
    IT0759_SHARPEDONITE = 0x2F7,
    IT0760_SLOWBRONITE = 0x2F8,
    IT0761_STEELIXITE = 0x2F9,
    IT0762_PIDGEOTITE = 0x2FA,
    IT0763_GLALITITE = 0x2FB,
    IT0764_DIANCITE = 0x2FC,
    IT0765_PRISON_BOTTLE = 0x2FD,
    IT0766_MEGA_CUFF = 0x2FE,
    IT0767_CAMERUPTITE = 0x2FF,
    IT0768_LOPUNNITE = 0x300,
    IT0769_SALAMENCITE = 0x301,
    IT0770_BEEDRILLITE = 0x302,
    IT0771_METEORITE = 0x303,
    IT0772_METEORITE = 0x304,
    IT0773_KEY_STONE = 0x305,
    IT0774_METEORITE_SHARD = 0x306,
    IT0775_EON_FLUTE = 0x307,
};

enum AbilID
#ifdef __cplusplus
    : u32
#endif
{
    ABIL_NULL = 0x0,
    ABIL001_STENCH = 0x1,
    ABIL002_DRIZZLE = 0x2,
    ABIL003_SPEED_BOOST = 0x3,
    ABIL004_BATTLE_ARMOR = 0x4,
    ABIL005_STURDY = 0x5,
    ABIL006_BULLETPROOF = 0x6,
    ABIL007_CORROSION = 0x7,
    ABIL008_SAND_VEIL = 0x8,
    ABIL009_STATIC = 0x9,
    ABIL010_VOLT_ABSORB = 0xA,
    ABIL011_WATER_ABSORB = 0xB,
    ABIL012_GALVANIZE = 0xC,
    ABIL013_CLOUD_NINE = 0xD,
    ABIL014_KEEN_SENSES = 0xE,
    ABIL015_THUNDER_ARMOR = 0xF,
    ABIL016_BALLISTICS = 0x10,
    ABIL017_FLUFFY = 0x11,
    ABIL018_FLASH_FIRE = 0x12,
    ABIL019_RESILIENT = 0x13,
    ABIL020_QUICK_DRAW = 0x14,
    ABIL021_WELL_BAKED_BODY = 0x15,
    ABIL022_INTIMIDATE = 0x16,
    ABIL023_SHADOW_TAG = 0x17,
    ABIL024_ROUGH_SKIN = 0x18,
    ABIL025_WONDER_GUARD = 0x19,
    ABIL026_LEVITATE = 0x1A,
    ABIL027_EFFECT_SPORE = 0x1B,
    ABIL028_SYNCHRONIZE = 0x1C,
    ABIL029_STRONG_BODY = 0x1D,
    ABIL030_NATURAL_CURE = 0x1E,
    ABIL031_LIGHTNING_ROD = 0x1F,
    ABIL032_SERENE_GRACE = 0x20,
    ABIL033_SWIFT_SWIM = 0x21,
    ABIL034_CHLOROPHYLL = 0x22,
    ABIL035_ILLUMINATE = 0x23,
    ABIL036_TRACE = 0x24,
    ABIL037_HUGE_POWER = 0x25,
    ABIL038_BERSERK = 0x26,
    ABIL039_INNER_FOCUS = 0x27,
    ABIL040_PIXILATE = 0x28,
    ABIL041_MERCILESS = 0x29,
    ABIL042_MAGNET_PULL = 0x2A,
    ABIL043_AMPLIFIER = 0x2B,
    ABIL044_RAIN_DISH = 0x2C,
    ABIL045_SAND_STREAM = 0x2D,
    ABIL046_NEUTRALIZING_GAS = 0x2E,
    ABIL047_THICK_FAT = 0x2F,
    ABIL048_REFRIGERATE = 0x30,
    ABIL049_FLAME_BODY = 0x31,
    ABIL050_RUN_AWAY = 0x32,
    ABIL051_WIND_RIDER = 0x33,
    ABIL052_HYPER_CUTTER = 0x34,
    ABIL053_PICKUP = 0x35,
    ABIL054_TRUANT = 0x36,
    ABIL055_HUSTLE = 0x37,
    ABIL056_GOOEY = 0x38,
    ABIL057_PLUS = 0x39,
    ABIL058_MINUS = 0x3A,
    ABIL059_FORECAST = 0x3B,
    ABIL060_AERILATE = 0x3C,
    ABIL061_SHED_SKIN = 0x3D,
    ABIL062_GUTS = 0x3E,
    ABIL063_MARVEL_SCALE = 0x3F,
    ABIL064_LIQUID_OOZE = 0x40,
    ABIL065_OVERGROW = 0x41,
    ABIL066_BLAZE = 0x42,
    ABIL067_TORRENT = 0x43,
    ABIL068_SWARM = 0x44,
    ABIL069_DETERMINED = 0x45,
    ABIL070_DROUGHT = 0x46,
    ABIL071_ARENA_TRAP = 0x47,
    ABIL072_VITAL_SPIRIT = 0x48,
    ABIL073_WHITE_SMOKE = 0x49,
    ABIL074_PURE_POWER = 0x4A,
    ABIL075_SHELL_ARMOR = 0x4B,
    ABIL076_AIR_LOCK = 0x4C,
    ABIL077_SLUSH_RUSH = 0x4D,
    ABIL078_MOTOR_DRIVE = 0x4E,
    ABIL079_RIVALRY = 0x4F,
    ABIL080_COLOSSAL = 0x50,
    ABIL081_SNOW_CLOAK = 0x51,
    ABIL082_GLUTTONY = 0x52,
    ABIL083_ANGER_POINT = 0x53,
    ABIL084_UNBURDEN = 0x54,
    ABIL085_HEATPROOF = 0x55,
    ABIL086_SIMPLE = 0x56,
    ABIL087_DRY_SKIN = 0x57,
    ABIL088_EXPLOIT = 0x58,
    ABIL089_IRON_FIST = 0x59,
    ABIL090_POISON_HEAL = 0x5A,
    ABIL091_ADAPTABILITY = 0x5B,
    ABIL092_SKILL_LINK = 0x5C,
    ABIL093_STRONG_JAW = 0x5D,
    ABIL094_SOLAR_POWER = 0x5E,
    ABIL095_QUICK_FEET = 0x5F,
    ABIL096_NORMALIZE = 0x60,
    ABIL097_SNIPER = 0x61,
    ABIL098_MAGIC_GUARD = 0x62,
    ABIL099_NO_GUARD = 0x63,
    ABIL100_TOUGH_CLAWS = 0x64,
    ABIL101_TECHNICIAN = 0x65,
    ABIL102_FUR_COAT = 0x66,
    ABIL103_DISTRACTING = 0x67,
    ABIL104_MOLD_BREAKER = 0x68,
    ABIL105_MOISTURIZE = 0x69,
    ABIL106_AFTERMATH = 0x6A,
    ABIL107_ANTICIPATION = 0x6B,
    ABIL108_FOREWARN = 0x6C,
    ABIL109_UNAWARE = 0x6D,
    ABIL110_TENACITY = 0x6E,
    ABIL111_FILTER = 0x6F,
    ABIL112_SLOW_START = 0x70,
    ABIL113_SCRAPPY = 0x71,
    ABIL114_STORM_DRAIN = 0x72,
    ABIL115_ICE_BODY = 0x73,
    ABIL116_SOLID_ROCK = 0x74,
    ABIL117_SNOW_WARNING = 0x75,
    ABIL118_HONEY_GATHER = 0x76,
    ABIL119_STAKEOUT = 0x77,
    ABIL120_RECKLESS = 0x78,
    ABIL121_MULTITYPE = 0x79,
    ABIL122_FLOWER_GIFT = 0x7A,
    ABIL123_BAD_DREAMS = 0x7B,
    ABIL124_PICKPOCKET = 0x7C,
    ABIL125_SHEER_FORCE = 0x7D,
    ABIL126_CONTRARY = 0x7E,
    ABIL127_UNNERVE = 0x7F,
    ABIL128_DEFIANT = 0x80,
    ABIL129_DEFEATIST = 0x81,
    ABIL130_CURSED_BODY = 0x82,
    ABIL131_HEALER = 0x83,
    ABIL132_FRIEND_GUARD = 0x84,
    ABIL133_WEAK_ARMOR = 0x85,
    ABIL134_HEAVY_METAL = 0x86,
    ABIL135_LIGHT_METAL = 0x87,
    ABIL136_MAJESTIC_WARD = 0x88,
    ABIL137_TOXIC_BOOST = 0x89,
    ABIL138_FLARE_BOOST = 0x8A,
    ABIL139_GOURMAND = 0x8B,
    ABIL140_PERMAFROST = 0x8C,
    ABIL141_MOODY = 0x8D,
    ABIL142_OVERCOAT = 0x8E,
    ABIL143_POISON_TOUCH = 0x8F,
    ABIL144_REGENERATOR = 0x90,
    ABIL145_SAVANT = 0x91,
    ABIL146_SAND_RUSH = 0x92,
    ABIL147_WONDER_SKIN = 0x93,
    ABIL148_PATIENT = 0x94,
    ABIL149_ILLUSION = 0x95,
    ABIL150_IMPOSTER = 0x96,
    ABIL151_INFILTRATOR = 0x97,
    ABIL152_CONTAGIOUS = 0x98,
    ABIL153_MOXIE = 0x99,
    ABIL154_JUSTIFIED = 0x9A,
    ABIL155_RATTLED = 0x9B,
    ABIL156_MAGIC_BOUNCE = 0x9C,
    ABIL157_SAP_SIPPER = 0x9D,
    ABIL158_PRANKSTER = 0x9E,
    ABIL159_SAND_FORCE = 0x9F,
    ABIL160_IRON_BARBS = 0xA0,
    ABIL161_ZEN_MODE = 0xA1,
    ABIL162_ILLUMINATION = 0xA2,
    ABIL163_TURBOBLAZE = 0xA3,
    ABIL164_TERAVOLT = 0xA4,
};

enum PkmField
{
    PF_PID = 0x0,
    PF_Species = 0x5,
    PF_Item = 0x6,
    PF_IdSet = 0x7,
    PF_Experience = 0x8,
    PF_Happiness = 0x9,
    PF_Ability = 0xA,
    PF_Markings = 0xB,
    PF_Region = 0xC,
    PF_EvHP = 0xD,
    PF_EvATK = 0xE,
    PF_EvDEF = 0xF,
    PF_EvSPE = 0x10,
    PF_EvSPA = 0x11,
    PF_EvSPD = 0x12,
    PF_ContestCool = 0x13,
    PF_ContestBeauty = 0x14,
    PF_ContestCute = 0x15,
    PF_ContestSmart = 0x16,
    PF_ContestTough = 0x17,
    PF_ContestSheen = 0x18,
    PF_RibbonChampionSinnoh = 0x19,
    PF_RibbonAbility = 0x1A,
    PF_RibbonAbilityGreat = 0x1B,
    PF_RibbonAbilityDouble = 0x1C,
    PF_RibbonAbilityMulti = 0x1D,
    PF_RibbonAbilityPair = 0x1E,
    PF_RibbonAbilityWorld = 0x1F,
    PF_RibbonAlert = 0x20,
    PF_RibbonShock = 0x21,
    PF_RibbonDowncast = 0x22,
    PF_RibbonCareless = 0x23,
    PF_RibbonRelax = 0x24,
    PF_RibbonSnooze = 0x25,
    PF_RibbonSmile = 0x26,
    PF_RibbonGorgeous = 0x27,
    PF_RibbonRoyal = 0x28,
    PF_RibbonGorgeousRoyal = 0x29,
    PF_RibbonFootprint = 0x2A,
    PF_RibbonRecord = 0x2B,
    PF_RibbonEvent = 0x2C,
    PF_RibbonLegend = 0x2D,
    PF_RibbonChampionWorld = 0x2E,
    PF_RibbonBirthday = 0x2F,
    PF_RibbonSpecial = 0x30,
    PF_RibbonSouvenir = 0x31,
    PF_RibbonWishing = 0x32,
    PF_RibbonClassic = 0x33,
    PF_RibbonPremier = 0x34,
    PF_Ribbon0x35 = 0x35,
    PF_Move1 = 0x36,
    PF_Move2 = 0x37,
    PF_Move3 = 0x38,
    PF_Move4 = 0x39,
    PF_Move1PP = 0x3A,
    PF_Move2PP = 0x3B,
    PF_Move3PP = 0x3C,
    PF_Move4PP = 0x3D,
    PF_Move1PPUp = 0x3E,
    PF_Move2PPUp = 0x3F,
    PF_Move3PPUp = 0x40,
    PF_Move4PPUp = 0x41,
    PF_Move1PPMax = 0x42,
    PF_Move2PPMax = 0x43,
    PF_Move3PPMax = 0x44,
    PF_Move4PPMax = 0x45,
    PF_IvHP = 0x46,
    PF_IvATK = 0x47,
    PF_IvDEF = 0x48,
    PF_IvSPE = 0x49,
    PF_IvSPA = 0x4A,
    PF_IvSPD = 0x4B,
    PF_IsEgg = 0x4C,
    PF_RibbonG3Cool = 0x4D,
    PF_RibbonG3CoolSuper = 0x4E,
    PF_RibbonG3CoolHyper = 0x4F,
    PF_RibbonG3CoolMaster = 0x50,
    PF_RibbonG3Beauty = 0x51,
    PF_RibbonG3BeautySuper = 0x52,
    PF_RibbonG3BeautyHyper = 0x53,
    PF_RibbonG3BeautyMaster = 0x54,
    PF_RibbonG3Cute = 0x55,
    PF_RibbonG3CuteSuper = 0x56,
    PF_RibbonG3CuteHyper = 0x57,
    PF_RibbonG3CuteMaster = 0x58,
    PF_RibbonG3Smart = 0x59,
    PF_RibbonG3SmartSuper = 0x5A,
    PF_RibbonG3SmartHyper = 0x5B,
    PF_RibbonG3SmartMaster = 0x5C,
    PF_RibbonG3Tough = 0x5D,
    PF_RibbonG3ToughSuper = 0x5E,
    PF_RibbonG3ToughHyper = 0x5F,
    PF_RibbonG3ToughMaster = 0x60,
    PF_RibbonChampionHoenn = 0x61,
    PF_RibbonWinning = 0x62,
    PF_RibbonVictory = 0x63,
    PF_RibbonArtist = 0x64,
    PF_RibbonEffort = 0x65,
    PF_RibbonChampionBattle = 0x66,
    PF_RibbonChampionRegional = 0x67,
    PF_RibbonChampionNational = 0x68,
    PF_RibbonCountry = 0x69,
    PF_RibbonNational = 0x6A,
    PF_RibbonEarth = 0x6B,
    PF_RibbonWorld = 0x6C,
    PF_FatefulEncounter = 0x6D,
    PF_Sex = 0x6E,
    PF_Forme = 0x6F,
    PF_Nature = 0x70,
    PF_IsHiddenAbility = 0x71,
    PF_NicknameStrBuf = 0x73,
    PF_NicknameRaw = 0x74,
    PF_HasNickname = 0x75,
    PF_MetGameVersion = 0x77,
    PF_RibbonG4Cool = 0x78,
    PF_RibbonG4CoolGreat = 0x79,
    PF_RibbonG4CoolUltra = 0x7A,
    PF_RibbonG4CoolMaster = 0x7B,
    PF_RibbonG4Beauty = 0x7C,
    PF_RibbonG4BeautyGreat = 0x7D,
    PF_RibbonG4BeautyUltra = 0x7E,
    PF_RibbonG4BeautyMaster = 0x7F,
    PF_RibbonG4Cute = 0x80,
    PF_RibbonG4CuteGreat = 0x81,
    PF_RibbonG4CuteUltra = 0x82,
    PF_RibbonG4CuteMaster = 0x83,
    PF_RibbonG4Smart = 0x84,
    PF_RibbonG4SmartGreat = 0x85,
    PF_RibbonG4SmartUltra = 0x86,
    PF_RibbonG4SmartMaster = 0x87,
    PF_RibbonG4Tough = 0x88,
    PF_RibbonG4ToughGreat = 0x89,
    PF_RibbonG4ToughUltra = 0x8A,
    PF_RibbonG4ToughMaster = 0x8B,
    PF_Ribbon0x8C = 0x8C,
    PF_OTNameStrBuf = 0x8D,
    PF_OTNameRaw = 0x8E,
    PF_HatchDateYear = 0x8F,
    PF_HatchDateMonth = 0x90,
    PF_HatchDateDay = 0x91,
    PF_MetYear = 0x92,
    PF_MetMonth = 0x93,
    PF_MetDay = 0x94,
    PF_HatchLocation = 0x95,
    PF_MetLocation = 0x96,
    PF_Pokerus = 0x97,
    PF_Pokeball = 0x98,
    PF_MetLevel = 0x99,
    PF_TrGender = 0x9A,
    PF_GroundTile = 0x9B,
    PF_StatusCond = 0x9D,
    PF_Level = 0x9E,
    PF_NowHP = 0xA0,
    PF_MaxHP = 0xA1,
    PF_ATK = 0xA2,
    PF_DEF = 0xA3,
    PF_SPE = 0xA4,
    PF_SPA = 0xA5,
    PF_SPD = 0xA6,
    PF_Mail = 0xA7,
    PF_IsSpeciesValid = 0xA9,
    PF_LegalSpecies = 0xAB,
    PF_IVsAll = 0xAC,
    PF_IsNotNidoran = 0xAD,
    PF_Type1 = 0xAE,
    PF_Type2 = 0xAF,
    PF_NicknameStrBufKeepFlags = 0xB0,
    PF_NicknameRawKeepFlags = 0xB1,
    PF_NPokemon = 0xB2,
    PF_PokestarFame = 0xB3,
};

enum MoveFailCause
{
    MOVEFAIL_NULL = 0x0,
    MOVEFAIL_PPZERO = 0x1,
    MOVEFAIL_SLEEP = 0x2,
    MOVEFAIL_PARALYSIS = 0x3,
    MOVEFAIL_FREEZE = 0x4,
    MOVEFAIL_CONFUSION = 0x5,
    MOVEFAIL_FLINCH = 0x6,
    MOVEFAIL_FOCUSPUNCHFAIL = 0x7,
    MOVEFAIL_ATTRACT = 0x8,
    MOVEFAIL_DISABLE = 0x9,
    MOVEFAIL_TAUNT = 0xA,
    MOVEFAIL_TORMENT = 0xB,
    MOVEFAIL_IMPRISON = 0xC,
    MOVEFAIL_HEALBLOCK = 0xD,
    MOVEFAIL_HPFULL = 0xE,
    MOVEFAIL_INSOMNIA = 0xF,
    MOVEFAIL_TRUANT = 0x10,
    MOVEFAIL_MOVELOCK = 0x11,
    MOVEFAIL_ENCORE = 0x12,
    MOVEFAIL_ABILITY = 0x13,
    MOVEFAIL_GRAVITY = 0x14,
    MOVEFAIL_TO_RECOVER = 0x15,
    MOVEFAIL_IGNORE = 0x16,
    MOVEFAIL_IGNORE_FALL_ASLEEP = 0x17,
    MOVEFAIL_IGNORE_SLEEPING = 0x18,
    MOVEFAIL_NO_REACTION = 0x19,
    MOVEFAIL_OTHER = 0x1A,
};

enum BattleActionType
{
    ACTION_DEFAULT = 0x0,
    ACTION_ATTACK = 0x1,
    ACTION_ITEM = 0x2,
    ACTION_SWITCH = 0x3,
    ACTION_RUN = 0x4,
    ACTION_SHIFT = 0x5,
    ACTION_ROTATE = 0x6,
    ACTION_SKIP = 0x7,
    ACTION_RECPLAY_TIMEOVER = 0x8,
    ACTION_RECPLAY_ERROR = 0x9,
};

enum ConditionFlag
#ifdef __cplusplus
    : u32
#endif
{
    CONDITIONFLAG_ACTIONDONE = 0,
    CONDITIONFLAG_NOSWITCH = 1,
    CONDITIONFLAG_CHARGE = 2,
    CONDITIONFLAG_FLY = 3,
    CONDITIONFLAG_DIVE = 4,
    CONDITIONFLAG_DIG = 5,
    CONDITIONFLAG_SHADOWFORCE = 6,
    CONDITIONFLAG_DEFENSECURL = 7,
    CONDITIONFLAG_MINIMIZE = 8,
    CONDITIONFLAG_FOCUSENERGY = 9,
    CONDITIONFLAG_POWERTRICK = 0xA,
    CONDITIONFLAG_MICLEBERRY = 0xB,
    CONDITIONFLAG_NOACTION = 0xC,
    CONDITIONFLAG_FLASHFIRE = 0xD,
    CONDITIONFLAG_BATONPASS = 0xE
};
enum BattleResult
{
    BTL_RESULT_DEFEAT = 0x0,
    BTL_RESULT_VICTORY = 0x1,
    BTL_RESULT_DRAW = 0x2,
    BTL_RESULT_FLEE = 0x3,
    BTL_RESULT_FLEE_FOE = 0x4,
    BTL_RESULT_CAPTURE = 0x5,
    BTL_RESULT_6 = 0x6,
};
enum ItemField
#ifdef __cplusplus
    : u32
#endif
{
    ITSTAT_PRICE = 0x0,
    ITSTAT_USE_EFFECT = 0x1,
    ITSTAT_USE_PARAM = 0x2,
    ITSTAT_FLAG1 = 0x3,
    ITSTAT_FLAG2 = 0x4,
    ITSTAT_POCKET_FIELD = 0x5,
    ITSTAT_EFFECT_FIELD = 0x6,
    ITSTAT_EFFECT_BATTLE = 0x7,
    ITSTAT_NATURAL_GIFT_EFFECT = 0x8,
    ITSTAT_FLING_EFFECT = 0x9,
    ITSTAT_FLING_POWER = 0xA,
    ITSTAT_NATURAL_GIFT_POWER = 0xB,
    ITSTAT_NATURAL_GIFT_TYPE = 0xC,
    ITSTAT_POCKET_BATTLE = 0xD,
    ITSTAT_HAS_BATTLE_STATS = 0xE,
    ITSTAT_CLASS = 0xF,
    ITSTAT_CONSUMABLE = 0x10,
    ITSTAT_SORT_IDX = 0x11,
    ITSTAT_AILMENT_SLP = 0x12,
    ITSTAT_AILMENT_PSN = 0x13,
    ITSTAT_AILMENT_BRN = 0x14,
    ITSTAT_AILMENT_FRZ = 0x15,
    ITSTAT_AILMENT_PAR = 0x16,
    ITSTAT_AILMENT_CFZ = 0x17,
    ITSTAT_AILMENT_INF = 0x18,
    ITSTAT_AILMENT_GSP = 0x19,
    ITSTAT_BOOST_REVIVE = 0x1A,
    ITSTAT_BOOST_SACRED_ASH = 0x1B,
    ITSTAT_BOOST_RARECANDY = 0x1C,
    ITSTAT_BOOST_EVOSTONE = 0x1D,
    ITSTAT_BOOST_ATK = 0x1E,
    ITSTAT_BOOST_DEF = 0x1F,
    ITSTAT_BOOST_SPA = 0x20,
    ITSTAT_BOOST_SPD = 0x21,
    ITSTAT_BOOST_SPE = 0x22,
    ITSTAT_BOOST_ACC = 0x23,
    ITSTAT_BOOST_CRIT = 0x24,
    ITSTAT_BOOST_PP1 = 0x25,
    ITSTAT_BOOST_PPMAX = 0x26,
    ITSTAT_FLAG_PPREPLENISH = 0x27,
    ITSTAT_FLAG_PPREPLENISH_FULL = 0x28,
    ITSTAT_FLAG_HPREPLENISH = 0x29,
    ITSTAT_FLAG_EVADD_HP = 0x2A,
    ITSTAT_FLAG_EVADD_ATK = 0x2B,
    ITSTAT_FLAG_EVADD_DEF = 0x2C,
    ITSTAT_FLAG_EVADD_SPE = 0x2D,
    ITSTAT_FLAG_EVADD_SPA = 0x2E,
    ITSTAT_FLAG_EVADD_SPD = 0x2F,
    ITSTAT_FLAG_EVADD_ABOVE100 = 0x30,
    ITSTAT_FLAG_FRIENDSHIP_ADD1 = 0x31,
    ITSTAT_FLAG_FRIENDSHIP_ADD2 = 0x32,
    ITSTAT_FLAG_FRIENDSHIP_ADD3 = 0x33,
    ITSTAT_EV_HP = 0x34,
    ITSTAT_EV_ATK = 0x35,
    ITSTAT_EV_DEF = 0x36,
    ITSTAT_EV_SPE = 0x37,
    ITSTAT_EV_SPA = 0x38,
    ITSTAT_EV_SPD = 0x39,
    ITSTAT_HEAL_AMOUNT = 0x3A,
    ITSTAT_PP_GAIN = 0x3B,
    ITSTAT_FRIENDSHIP1 = 0x3C,
    ITSTAT_FRIENDSHIP2 = 0x3D,
    ITSTAT_FRIENDSHIP3 = 0x3E,
};
enum MoveTarget
{
    TARGET_OTHER_SELECT = 0x0,
    TARGET_ALLY_USER_SELECT = 0x1,
    TARGET_ALLY_SELECT = 0x2,
    TARGET_ENEMY_SELECT = 0x3,
    TARGET_OTHER_ALL = 0x4,
    TARGET_ENEMY_ALL = 0x5,
    TARGET_ALLY_ALL = 0x6,
    TARGET_USER = 0x7,
    TARGET_ALL = 0x8,
    TARGET_ENEMY_RANDOM = 0x9,
    TARGET_FIELD = 0xA,
    TARGET_SIDE_ENEMY = 0xB,
    TARGET_SIDE_ALLY = 0xC,
    TARGET_UNKNOWN = 0xD,
};

enum BattleEventItemType
{
    EVENTITEM_MOVE = 0x0,
    EVENTITEM_POS = 0x1,
    EVENTITEM_SIDE = 0x2,
    EVENTITEM_FIELD = 0x3,
    EVENTITEM_ABILITY = 0x4,
    EVENTITEM_ITEM = 0x5,
    EVENTITEM_ISOLATED = 0x6,
    EVENTITEM_MAX = 0x7,
};
enum MoveField
#ifdef __cplusplus
    : u16
#endif
{
    MVDATA_TYPE = 0,
    MVDATA_QUALITY = 1,
    MVDATA_CATEGORY = 2,
    MVDATA_POWER = 3,
    MVDATA_ACCURACY = 4,
    MVDATA_BASEPP = 5,
    MVDATA_PRIORITY = 6,
    MVDATA_CRIT_STAGE = 7,
    MVDATA_HIT_MAX = 8,
    MVDATA_HIT_MIN = 9,
    MVDATA_FLINCH_RATE = 0xA,
    MVDATA_INFLICT_STATUS = 0xB,
    MVDATA_INFLICT_CHANCE = 0xC,
    MVDATA_INFLICT_DURATION = 0xD,
    MVDATA_TURN_MIN = 0xE,
    MVDATA_TURN_MAX = 0xF,
    MVDATA_STAT1 = 0x10,
    MVDATA_STAT2 = 0x11,
    MVDATA_STAT3 = 0x12,
    MVDATA_STAT1_STAGE = 0x13,
    MVDATA_STAT2_STAGE = 0x14,
    MVDATA_STAT3_STAGE = 0x15,
    MVDATA_STAT1_CHANCE = 0x16,
    MVDATA_STAT2_CHANCE = 0x17,
    MVDATA_STAT3_CHANCE = 0x18,
    MVDATA_RECOIL = 0x19,
    MVDATA_HEAL = 0x1A,
    MVDATA_TARGET = 0x1B,
    MVDATA_WAZASEQ_ID = 0x1C,
    MVDATA_UNUSED = 0x1D,
    MVDATA_RECOIL_NEG = 0x1E,
    MVDATA_HEAL_NEG = 0x1F,
};

enum PersonalField
#ifdef __cplusplus
    : u16
#endif
{
    Personal_HP = 0x0,
    Personal_ATK = 0x1,
    Personal_DEF = 0x2,
    Personal_SPE = 0x3,
    Personal_SPA = 0x4,
    Personal_SPD = 0x5,
    Personal_Type1 = 0x6,
    Personal_Type2 = 0x7,
    Personal_CaptureRate = 0x8,
    Personal_BaseEXP = 0x9,
    Personal_EvHP = 0xA,
    Personal_EvATK = 0xB,
    Personal_EvDEF = 0xC,
    Personal_EvSPE = 0xD,
    Personal_EvSPA = 0xE,
    Personal_EvSPD = 0xF,
    Personal_Telekinesis = 0x10,
    Personal_WildItem50 = 0x11,
    Personal_WildItem5 = 0x12,
    Personal_WildItem1 = 0x13,
    Personal_GenderProb = 0x14,
    Personal_EggHappiness = 0x15,
    Personal_BaseHappiness = 0x16,
    Personal_GrowthRate = 0x17,
    Personal_EggGroup1 = 0x18,
    Personal_EggGroup2 = 0x19,
    Personal_Abil1 = 0x1A,
    Personal_Abil2 = 0x1B,
    Personal_AbilH = 0x1C,
    Personal_EscapeRate = 0x1D,
    Personal_FormeDataOffs = 0x1E,
    Personal_FormeSpritesOffset = 0x1F,
    Personal_FormeCount = 0x20,
    Personal_Color = 0x21,
    Personal_SpriteFlip = 0x22,
    Personal_SpriteForme = 0x23,
    Personal_EvoStage = 0x24,
    Personal_Height = 0x25,
    Personal_Weight = 0x26,
    Personal_TMHM1 = 0x27,
    Personal_TMHM2 = 0x28,
    Personal_TMHM3 = 0x29,
    Personal_TMHM4 = 0x2A,
    Personal_TypeTutor = 0x2B,
    Personal_SpecialTutor1 = 0x2C,
    Personal_SpecialTutor2 = 0x2D,
    Personal_SpecialTutor3 = 0x2E,
    Personal_SpecialTutor4 = 0x2F,
};

// typedef void *(*BattleEventHandler)();

// struct HandlerTable
// {
//     BattleEventType EventType;
//     BattleEventHandler Handler;
// };
// typedef HandlerTable *(*AbilityEventAddFunc)(int *);
// typedef HandlerTable *(*ItemEventAddFunc)(int *);
// typedef HandlerTable *(*MoveEventAddFunc)(int *a1);

struct SWAN_ALIGNED(2) StrBuf
{
    u16 CharCapacity;
    u16 CharCount;
    u32 Magic;
    __int16 String[];
};

struct ZoneSpawnInfo
{
    u32 ChangeType;
    u16 ZoneID;
    u16 WarpID;
    u16 WarpDir;
    u16 PosWeightBits;
    b32 IsRail;
    char Pos[12];
};
struct TrainerBattleSetup
{
    _DWORD TrID;
    _DWORD TrClass;
    _DWORD TrAIBits;
    u16 TrItems[4];
    StrBuf *TrainerName;
    __int16 field_18[4];
    __int16 field_20[4];
};

struct EffectivenessRecorder
{
    int effectiveness[24];
};

// struct ConditionData
// {
//     unsigned __int32 status : 3;
//     unsigned __int32 turncount : 3;
//     unsigned __int32 field7 : 3;
//     unsigned __int32 param : 3;
//     unsigned __int32 rest : 20;
// };

struct ConditionData_PokeTurn
{
    unsigned __int32 type : 3;
    unsigned __int32 turns : 6;
    unsigned __int32 monID : 6;
    unsigned __int32 param : 16;
    unsigned __int32 flag : 1;
};

struct ConditionData_Poke
{
    unsigned __int32 type : 3;
    unsigned __int32 monID : 6;
    unsigned __int32 param : 16;
    unsigned __int32 flag : 1;
    unsigned __int32 pad : 6;
};

struct ConditionData_Turn
{
    unsigned __int32 type : 3;
    unsigned __int32 turns : 6;
    unsigned __int32 param : 16;
    unsigned __int32 flag : 1;
    unsigned __int32 pad : 6;
};

struct ConditionData_Permanent
{
    unsigned __int32 type : 3;
    unsigned __int32 minTurns : 6;
    unsigned __int32 paramOrMaxTurns : 16;
    unsigned __int32 flag : 1;
    unsigned __int32 pad : 6;
};

union SWAN_ALIGNED(4) ConditionData
{
    u32 raw;
    ConditionData_Permanent *permanent;
    ConditionData_Poke *poke;
    ConditionData_PokeTurn *poketurn;
    ConditionData_Turn *turn;
};

struct PersonalData
{
    u8 BaseHP;
    u8 BaseATK;
    u8 BaseDEF;
    u8 BaseSPE;
    u8 BaseSPA;
    u8 BaseSPD;
    u8 Type1;
    u8 Type2;
    u8 CaptureRate;
    u8 EvoStage;
    u16 EVYield;
    u16 WildItem50;
    u16 WildItem5;
    u16 WildItem1;
    u8 GenderProb;
    u8 EggHappiness;
    u8 BaseHappiness;
    u8 ExpGroup;
    u8 EggGroup1;
    u8 EggGroup2;
    u8 Abil1;
    u8 Abil2;
    u8 AbilHidden;
    u8 EscapeRate;
    u16 FormeDataOffs;
    u16 FormeSpriteOffs;
    u8 FormeCount;
    u8 Color;
    u16 BaseEXP;
    u16 HeightCm;
    u16 WeightCg;
    int TMHM1;
    int TMHM2;
    int TMHM3;
    int TMHM4;
    int TypeTutors;
    int SpecialTutors[4];
};

struct EscapeInfo
{
    u32 count;
    u8 clientID[4];
};

struct SWAN_ALIGNED(2) MoveCore
{
    u16 MoveID;
    u8 CurrentPP;
    u8 MaxPP;
    u8 PPUpCount;
    char UsedFlag;
};

struct MoveSet
{
    MoveCore truth;
    MoveCore surface;
    u8 fLinked;
};

struct Btlv_StringParam
{
    u16 strID;
    u8 wait;
    u8 strTypeAndArgCount;
    int args[8];
};

struct MoveAnimCtrl
{
    unsigned __int16 MoveID;
    unsigned __int8 attackerPos;
    unsigned __int8 targetPos;
    unsigned __int8 effectIndex;
    unsigned __int8 flags;
    unsigned __int16 subEff;
};

struct ItemBattleStats
{
    u8 CureInflict;
    u8 Boost[4];
    u8 FunctionFlags0;
    u8 FunctionFlags1;
    char EVHP;
    char EVATK;
    char EVDEF;
    char EVSPE;
    char EVSPA;
    char EVSPD;
    u8 HealAmount;
    u8 PPGain;
    char Friendship1;
    char Friendship2;
    char Friendship3;
    char field_1F;
    char field_20;
};

struct EventWorkStack
{
    u8 work[512];
    u16 size[16];
    u32 sp;
};

struct EventWorkSave
{
    u16 Works[431];
    u8 FlagBytes[383];
    u8 CanRespawnHiddenItems;
};

struct ItemData
{
    u16 Price;
    u8 HeldEffect;
    u8 HeldArgument;
    u8 NaturalGiftEffect;
    u8 FlingEffect;
    u8 FlingPower;
    u8 NaturalGiftPower;
    u16 Packed;
    u8 EffectField;
    u8 EffectBattle;
    u8 HasBattleStats;
    u8 ItemClass;
    u8 Consumable;
    u8 SortIndex;
    ItemBattleStats BattleStats;
};
struct StatStageParam
{
    u8 AttackStage;
    u8 DefenseStage;
    u8 SpAttackStage;
    u8 SpDefenseStage;
    u8 SpeedStage;
    u8 AccuracyStage;
    u8 EvasionStage;
};

struct MoveDamageRec
{
    u16 moveID;
    u16 damage;
    u8 damageType;
    u8 moveType;
    u8 pokeID;
    u8 pokePos;
};
struct PkmBufferChunk
{
    char RawData[32];
};

struct PkmBuffer
{
    PkmBufferChunk Chunks[4];
};

struct SWAN_ALIGNED(4) BoxPkm
{
    u32 pid;
    u16 SanityFlags;
    u16 checksum;
    PkmBuffer ContentBuffer;
};

struct MailData
{
    u32 TID;
    _BYTE TrainerGender;
    _BYTE Region;
    _BYTE GameVersion;
    _BYTE byte7;
    char StringContent[16];
    __int16 field_18;
    __int16 field_1A;
    __int16 field_1C;
    _WORD word1E;
    int field_20;
    int field_24;
    int field_28;
    int field_2C;
    int field_30;
    int field_34;
};

struct PartyPkm
{
    BoxPkm Base;
    u32 StatusCond;
    u8 Level;
    u8 field_8D;
    u16 NowHP;
    u16 MaxHP;
    u16 ATK;
    u16 DEF;
    u16 SPE;
    u16 SPA;
    u16 SPD;
    MailData Mail;
    u32 field_D4;
    u32 field_D8;
};
struct PokeParty
{
    u32 PokemonCapacity;
    u32 PokemonCount;
    PartyPkm Pokemon[6];
    u8 PresentMemberBits;
    u8 _pad1;
    u16 _pad2;
};

struct SWAN_ALIGNED(4) BattleMon
{
    PartyPkm *partySrc;
    PartyPkm *disguiseSrc;
    int Experience;
    __int16 Species;
    __int16 MaxHP;
    __int16 CurrentHP;
    __int16 HeldItem;
    __int16 UsedItem;
    __int16 Ability;
    char Level;
    char ID;
    char BaseAttack;
    char flags;
    int Conditions[36];
    u8 MoveConditionCounter[36];
    char ConfrontRecCount;
    u8 ConfrontRec[24];
    _BYTE gapE9[5];
    __int16 Attack;
    __int16 Defense;
    __int16 SpecialAttack;
    __int16 SpecialDefense;
    __int16 Speed;
    char Type1;
    char Type2;
    char Sex;
    char field_FB;
    StatStageParam statStageParam;
    char field_103;
    MoveSet Moves[4];
    __int16 CurrentAbility;
    __int16 Weight;
    char MoveCount;
    char Form;
    char CritStage;
    char UsedMoveCount;
    char PrevMoveType;
    char field_145;
    __int16 TurnCount;
    __int16 AppearedTurn;
    __int16 PreviousMove;
    __int16 PreviousMoveID;
    __int16 ConsecutiveMoveCounter;
    __int16 field_150;
    char prevTargetPos;
    u8 TurnFlag[2];
    u8 ConditionFlag[2];
    u8 Counters[5];
    MoveDamageRec DamageRec[3][6];
    unsigned __int8 DamageRecCount[3];
    char DamageRecTurn;
    char DamageRecPtr;
    char field_1F1;
    __int16 SubstituteHP;
    __int16 comboMoveID;
    char comboPokeID;
    char field_1F7;
};

struct PokeSelectResult
{
    u8 selIdx[3];
    u8 outPokeIdx[3];
    u8 count;
    char field_7;
    char fCancel;
};

struct SWAN_ALIGNED(4) BattleEventItem
{
    BattleEventItem *prev;
    BattleEventItem *next;
    const char *handlerTable;
    char skipCheckHandler;
    BattleEventItemType factorType;
    int priority;
    int flags;
    int work[7];
    u16 subID;
    u8 dependID;
    u8 pokeID;
};

struct BattleField
{
    int Weather;
    int WeatherTurns;
    BattleEventItem *battleEventItems[8];
    ConditionData conditionData[8];
    u32 TurnCount[8];
    u32 DependPokeID[8][6];
    u32 DependPokeCount[8];
    u32 EffectEnableFlags[8];
};

struct SWAN_ALIGNED(2) BattleFieldStatus
{
    u32 BattleBGID;
    _DWORD BattlePedestalID;
    _BYTE BtlWeather;
    u8 Season;
    u16 ZoneID;
    u8 Hour;
    u8 Minute;
    char field_E;
    char field_F;
};

struct TrainerData
{
    u8 Flags;
    u8 Class;
    u8 BattleType;
    u8 PokemonCount;
    u16 Items[4];
    u32 AI;
    u8 Healer;
    u8 Money;
    u16 ItemAfterBattle;
};

struct TrainerParam
{
    int pTrainerInfo;
    int Name;
    __int16 Class;
    __int16 ID;
    int AIFlags;
    u16 Items[4];
    int field_18;
    int field_1C;
    int field_20;
    int field_24;
};

struct SWAN_ALIGNED(4) BattleParty
{
    BattleMon *mons[6];
    u8 memberCount;
    u8 numCoverPos;
    char field_1A;
    char field_1B;
};

struct PokeSelectParam
{
    BattleParty *party;
    u8 numSelect;
    u8 prohibit[6];
    u8 bDisabledPutPosSequence;
};
struct PokeCon
{
    int *mainModule;
    BattleParty party[4];
    PokeParty *srcParty[4];
    BattleMon *activePokeParam[24];
    int fForServer;
};
struct BattleAction_Default
{
    unsigned __int32 actionType : 4;
    unsigned __int32 param : 28;
};
struct BattleAction_Fight
{
    unsigned __int32 actionType : 4;
    unsigned __int32 targetPos : 3;
    unsigned __int32 moveID : 19;
    unsigned __int32 moveInfoFlag : 1;
    unsigned __int32 pad : 5;
};
struct BattleAction_Item
{
    unsigned __int32 actionType : 4;
    unsigned __int32 targetIdx : 3;
    unsigned __int32 itemID : 16;
    unsigned __int32 param : 8;
    unsigned __int32 pad : 1;
};
struct BattleAction_Switch
{
    unsigned __int32 actionType : 4;
    unsigned __int32 posIdx : 3;
    unsigned __int32 memberIdx : 3;
    unsigned __int32 depleteFlag : 1;
    unsigned __int32 pad : 21;
};
struct BattleAction_Run
{
    unsigned __int32 actionType : 4;
    unsigned __int32 pad : 28;
};

struct BattleAction_Shift
{
    unsigned __int32 actionType : 4;
    unsigned __int32 shift : 28;
};

struct BattleAction_Rotate
{
    unsigned __int32 actionType : 4;
    unsigned __int32 rotation : 3;
    unsigned __int32 pad : 3;
    unsigned __int32 unkFlag : 1;
    unsigned __int32 pad2 : 21;
};

// union BattleActionParam
// {
//     BattleAction_Fight Attack;
//     BattleAction_Item Item;
//     BattleAction_Switch Switch;
//     BattleAction_Run Run;
//     BattleAction_Default Default;
// };

union BattleActionParam
{
    BattleAction_Default Default;
    BattleAction_Fight Attack;
    BattleAction_Item Item;
    BattleAction_Switch Switch;
    BattleAction_Run Run;
    BattleAction_Shift Shift;
    BattleAction_Rotate Rotate;
};

struct SWAN_ALIGNED(4) BtlSetup
{
    BtlType btlType;
    BattleStyle BtlStyle;
    BattleFieldStatus m_FieldStatus;
    u16 BattleBGMID;
    __int16 WinBGMID;
    int field_1C;
    char commMode;
    char field_21;
    BattleSetupType BtlSetupType;
    char field_23;
    PokeParty *Parties[4];
    int m_PlayerInfo;
    int field_38;
    int field_3C;
    int field_40;
    u8 field_44[4];
    TrainerBattleSetup *TrainerSetups[4];
    int field_58;
    int field_5C;
    int field_60;
    int field_64;
    int field_68;
    int field_6C;
    GameData *gameData;
    TrainerData *m_TrainerData;
    int *m_ItemWork;
    int field_7C;
    int m_Dex;
    int m_RecordData;
    int field_88;
    int field_8C;
    int field_90;
    char field_94;
    char field_95;
    char field_96;
    char field_97;
    char BadgeCount;
    char field_99;
    char field_9A;
    char field_9B;
    int field_9C;
    __int16 field_A0;
    __int16 field_A2;
    int EarnedMoney;
    BattleResult battleResult;
    char CapturedPkmIdx;
    char field_AD;
    __int16 field_AE;
    void *field_B0;
    int field_B4;
    int field_B8;
    int field_BC;
    int field_C0;
    int field_C4;
    int field_C8;
    int field_CC;
    u16 HPSum;
    u8 CurrentTurn;
    u8 SwitchCount;
    u8 NoEffectHits;
    u8 SuperEffectiveHits;
    u8 NotVeryEffectiveHits;
    u8 OpponentNoEffectHits;
    u8 OpponentNotVeryEffectiveHits;
    u8 BattlesWon;
    u8 OpponentFainted;
    u8 AllyFainted;
    u8 UniqueMovesUsed;
    char field_DD;
    char field_DE;
    u8 field_DF;
    int field_E0;
    int field_E4;
    int field_E8;
    int field_EC;
    int field_F0;
    int field_F4;
    int field_F8;
    int field_FC;
    int field_100[4];
    char field_110;
    int field_114;
    int field_118;
    int field_11C;
    int field_120;
    int field_124;
    char field_128;
    u8 field_129;
    int field_12C;
    int field_130;
    int field_134;
    __int16 field_138;
    __int16 field_13A;
    u8 KeySystemLevelAdjust;
    char field_13D;
    char field_13E;
    char field_13F;
    int field_140;
    int field_144;
    int field_148;
};

struct SWAN_ALIGNED(32) MainModule
{
    BtlSetup *btlSetup;
    int *BtlvCore;
    BtlServerWk *server;
    BtlClientWk *clients[4];
    TrainerParam trainerParam[4];
    int playerInfo;
    u8 field_C4[4];
    char pokeconClient[232];
    char pokeconServer[232];
    PokeParty *srcParty[4];
    PokeParty *srcPartyForServer[4];
    PokeParty *tempParty;
    BattleField *battleField;
    PartyPkm *TempPartyPkm;
    int field_2C4;
    int field_2C8;
    int field_2CC;
    int field_2D0;
    int field_2D4;
    _BYTE gap2D8[260];
    int field_3DC;
    int chatotChatterBlk[4];
    int randomSeed;
    int field_3F4;
    int field_3F8;
    int field_3FC;
    int field_400;
    int field_404;
    int field_408;
    int field_40C;
    int field_410;
    int field_414;
    int field_418;
    int field_41C;
    __int16 field_420;
    SWAN_PACKED SWAN_ALIGNED(1) int field_422;
    char field_426;
    char field_427;
    unsigned __int8 field_428[6];
    char field_42E;
    char field_42F;
    int winMoney;
    int bonusMoney;
    int loseMoney;
    int field_43C;
    __int16 field_440;
    __int16 CmdLimitTime;
    int serverResult;
    EscapeInfo escapeInfo;
    int subproc;
    int field_454;
    int field_458;
    int field_45C;
    int subseq;
    int field_464;
    HeapID heapID;
    char field_46A;
    char field_46B;
    char playerClientID;
    char field_46D;
    char field_46E;
    char field_46F;
    char field_470;
    char field_471;
    char CurrentTrainer;
    char field_473;
    int pokestarScriptPtr;
    int pokestarScriptHeapPtr;
    int field_47C;
};
struct BtlvInput_VsRecorder
{
    int field_0;
    int WordSetNumber;
    int field_8;
    int field_C;
};

struct SWAN_PACKED SWAN_ALIGNED(1) BottomScreenMenuData
{
    int field_0;
    PokeParty *pokeParty;
    PokeParty *AllyPokeParty;
    GFLFont *Font;
    HeapID heapID;
    __int16 field_12;
    BattleStyle battleStyle;
    int IsBagDisabled;
    char field_1C;
    u8 SelectedPokeIndex[2];
    char field_1F;
    u8 SelectedMon;
    char InfoPokeIndex;
    char NumPartyMembers;
    char field_23;
    __int16 SelectedItem;
    __int16 IsSelectedMonTrapped;
    TCBManager *tCBManager;
    PalAnm *palAnm;
    int IsFinished;
    int field_34;
    int field_38;
    int field_3C;
    int field_40;
    int field_44;
    u8 field_48[3];
    char MoveInfoMoveIndex;
    char field_4C;
};

struct SWAN_PACKED SWAN_ALIGNED(4) BtlClientWk
{
    MainModule *mainModule;
    PokeCon *pokeCon;
    int *procPoke;
    int *procAction;
    int *recData;
    int battleRecReader;
    char recPlayer[14];
    SWAN_ALIGNED(4)
    _DWORD dword28;
    EscapeInfo escapeInfo;
    BattleField *battleField;
    _BYTE gap38[24];
    int *adapter;
    char *btlvCore;
    Btlv_StringParam strParam;
    int field_7C;
    Btlv_StringParam field_80;
    _BYTE gapA4[4];
    _DWORD cmdCheckServer;
    BattleMon *Party[6];
    int field_C4;
    int field_C8;
    char field_CC;
    int (*field_D0)(BtlClientWk *, int *) SWAN_ALIGNED(4);
    int field_D4;
    int (*ActionSelectProc)(BtlClientWk *a1, unsigned int *a2);
    unsigned int ActionSelectSeq;
    int *returnDataActionSelect;
    int returnDataActionSelectCount;
    int field_E8;
    _WORD cmdLimitTime;
    _WORD wordEE;
    unsigned __int16 AIBagItems[4];
    int *VM;
    _QWORD rand1;
    _QWORD rand2;
    _QWORD rand3;
    u8 field_114[6];
    u8 field_11A[4];
    SWAN_ALIGNED(4)
    BattleParty *actPokeParty;
    unsigned __int8 myCoverPosNum;
    unsigned __int8 procPokeIdx;
    char prevPokeIdx;
    u8 firstPokeIdx;
    char fStdMsgChanged;
    char field_129;
    char field_12A;
    SWAN_ALIGNED(2)
    BattleActionParam actionParam[3];
    u8 field_138[4];
    int cmdQueue;
    int ServerCmdArgs;
    _BYTE gap144[60];
    int serverCmd;
    int ServerCmd;
    int ServerCmdSeq;
    PokeSelectParam pokeSelectParam;
    PokeSelectResult pokeSelectResult;
    char field_1A1;
    HeapID TrainerMsgHeapID;
    char field_1A4;
    SWAN_ALIGNED(2)
    u16 field_1A6;
    _WORD SelItemWork[3];
    u8 myID;
    char field_1AF;
    _BYTE gap1B0;
    char commWaitInfoOn;
    char field_1B2;
    char field_1B3;
    _BYTE field_1B4;
    u8 forceQuitActionSelect;
    _BYTE cmdCheckTimingCode;
    char currentActionCount;
    char moveInfoPokeIdx;
    char moveInfoMoveIdx;
    char actSelectFlags;
    char myChangePokeCount;
    char field_1BC;
    u8 field_1BD;
    unsigned __int8 myChangePokePos[6];
    char field_1C4;
    char field_1C5;
    char field_1C6;
    char field_1C7;
    char field_1C8;
    char field_1C9;
    char field_1CA;
    SWAN_ALIGNED(2)
    int field_1CC;
    int field_1D0;
    _BYTE gap1D4[20];
    __int16 field_1E8;
    __int16 field_1EA;
    int field_1EC;
    int field_1F0;
    _BYTE gap1F4[16];
    int field_204;
    _BYTE gap208[12];
    int field_214;
    _BYTE gap218[4];
    _WORD word21C;
    SWAN_ALIGNED(4)
    int dword220;
    u16 field_224[22];
    char field_250;
};

struct SWAN_PACKED SWAN_ALIGNED(2) BtlvCore
{
    MainModule *mainModule;
    BtlClientWk *client;
    PokeCon *pokeCon;
    unsigned __int8 myID;
    _BYTE gapD[3];
    _DWORD IsCatchingTutorial;
    bool (*FuncForBattleMode)(BtlvCore *, int *a1, int);
    _DWORD BattleSceneSeq;
    int (*field_1C)(int *, BtlvCore *);
    int (*field_20)(int *, BtlvCore *);
    BtlvCore *field_24;
    int field_28;
    void *field_2C;
    _BYTE gap30[124];
    StrBuf *strBuf;
    GFLFont *Font1;
    GFLFont *Font2;
    BattleActionParam *ActionParam;
    BattleMon *ActiveMon;
    int ActiveMonID;
    int field_C4;
    int field_C8;
    GFLFont *ItemSelectFont;
    int field_D0;
    HeapID ItemSelectHeapID;
    __int16 field_D6;
    int field_D8;
    char field_DC;
    char field_DD;
    u16 SelectedItem;
    u8 field_E0;
    char field_E1;
    char field_E2;
    char field_E3;
    int field_E4;
    int field_E8;
    int field_EC;
    char BallCatchMode;
    char IsWildBattle;
    u8 field_F2;
    char field_F3;
    int field_F4;
    int field_F8;
    int field_FC;
    int field_100;
    int field_104;
    int IsOnlineBattle;
    BottomScreenMenuData bottomScreenMenuData;
    char field_159;
    _BYTE gap15A[2];
    GFLFont *field_15C;
    HeapID field_160;
    char field_162;
    char field_163;
    PokeParty *field_164;
    int field_168;
    int field_16C;
    int field_170;
    int field_174;
    GFLFont *BottomScreenMenuFont;
    HeapID BottomScreenMenuHeapID;
    char field_17E;
    SWAN_ALIGNED(2)
    int field_180;
    int field_184[4];
    int field_194;
    int field_198;
    PokeSelectResult *pokeSelectResult;
    BtlvInput_VsRecorder btlvInput_VsRecorder;
    BattleMon **Party;
    u8 BottomScreenMenuSeq;
    char field_1B5;
    char field_1B6;
    char field_1B7;
    char field_1B8;
    char field_1B9;
    char field_1BA;
    char field_1BB;
    TCBManagerEx *CallbackMgr;
    BtlvScu *btlvScu;
    BtlvScd *btlvScd;
    HeapID heapID;
};

struct ServerCommandQueue
{
    u32 writePtr;
    u32 readPtr;
    u8 buffer[3000];
};

struct SVCL_WORK
{
    int adapter;
    BattleParty *party;
    u8 byte8;
    u8 byte9;
    u8 byteA;
    u8 id;
};

struct FaintRecordUnit
{
    u8 count;
    u8 fExpChecked[24];
    u8 FaintPokeID[24];
};

struct FaintRecord
{
    FaintRecordUnit turnRecord[4];
};

struct HandlerParam_Header
{
    u32 flags;
};
struct SWAN_ALIGNED(4) HandlerParam_ChangeType
{
    HandlerParam_Header header;
    u16 nextType;
    u8 monID;
    u8 pad;
};

struct SWAN_ALIGNED(4) HandlerParam_DelayMoveDamage
{
    HandlerParam_Header header;
    u8 attackerID;
    u8 targetID;
    __int16 MoveID;
};

// struct HandlerParam_Header
// {
//     unsigned __int32 paramType : 8;
//     unsigned __int32 monID : 5;
//     unsigned __int32 size : 10;
//     unsigned __int32 fDisableAbilityPopups : 1;
//     unsigned __int32 fDisableExecution1 : 1;
//     unsigned __int32 fDisableExecution2 : 1;
//     unsigned __int32 isHostile : 1;
//     unsigned __int32 pad : 5;
// };

struct SWAN_ALIGNED(2) HandlerParam_SetCounter
{
    HandlerParam_Header header;
    u8 pokeID;
    Counter counterID;
    u8 value;
};

struct SWAN_ALIGNED(4) HandlerParam_StrParams
{
    u16 ID;
    int type;
    int args[8];
};

struct SWAN_ALIGNED(4) HandlerParam_Switch
{
    HandlerParam_Header header;
    HandlerParam_StrParams preStr;
    HandlerParam_StrParams exStr;
    u8 pokeID;
    char fIntrDisable;
};

struct HandlerParam_ChangeHP
{
    HandlerParam_Header header;
    u8 poke_cnt;
    u8 fEffectDisable;
    u8 fItemReactionDisable;
    u8 pokeID[6];
    u32 volume[6];
    u32 damageCause;
};

struct HandlerParam_ChangeStatStage
{
    HandlerParam_Header header;
    StatStage rankType;
    u32 pad;
    s8 rankVolume;
    u8 pad2;
    u8 fMoveAnimation;
    u8 poke_cnt;
    u8 pokeID[6];
    HandlerParam_StrParams exStr;
    // u8 isHostile;
};

struct HandlerParam_AddSideEffect
{
    HandlerParam_Header header;
    u32 effect;
    ConditionData cont;
    u8 side;
    HandlerParam_StrParams exStr;
};

struct HandlerParam_Message
{
    HandlerParam_Header header;
    HandlerParam_StrParams str;
};

struct HandlerParam_Transform
{
    HandlerParam_Header header;
    u8 pokeID;
    HandlerParam_StrParams exStr;
};

struct MoveParam
{
    unsigned __int16 MoveID;
    unsigned __int16 OriginalMoveID;
    unsigned __int16 userType;
    unsigned __int8 moveType;
    char damageType;
    int category;
    MoveTarget targetType;
    int flags;
};

struct ZoneData
{
    char MapType;
    u8 NPCInfoCacheIdx;
    u16 AreaID;
    u16 MatrixID;
    u16 ScriptsID;
    u16 LevelScriptsID;
    u16 TextsID;
    u16 BGMSpr;
    u16 BGMSum;
    u16 BGMAut;
    u16 BGMWin;
    u16 EncID;
    u16 EntitiesID;
    u16 ParentZoneID;
    u16 LocNameInfo;
    u16 EnvFlags;
    u16 Flags1BattleBGMapTransition;
    u16 MatrixCamBounds;
    u16 NameIcon;
    int FlyX;
    int FlyY;
    int FlyZ;
};

struct ZoneDataSystem
{
    int *ZoneDataArc;
    ZoneData CurrentZone;
    u16 CurrentZoneID;
    __int16 _padCurrentZoneID;
    void *FogIndex;
    void *StaticLights;
    u16 FogIndexSize;
    u8 StaticLightsSize;
    u8 FlashIndexSize;
    void *FlashIndex;
    u8 EnableVersionSpecificZone[3];
    u8 EnableVersionSpecificArea[3];
    u16 Padding;
};

// struct PartyPkm
// {
//     BoxPkm Base;
//     u32 StatusCond;
//     u8 Level;
//     u8 field_8D;
//     u16 NowHP;
//     u16 MaxHP;
//     u16 ATK;
//     u16 DEF;
//     u16 SPE;
//     u16 SPA;
//     u16 SPD;
//     MailData Mail;
//     u32 field_D4;
//     u32 field_D8;
// };

struct HandlerParam_SwapItem
{
    HandlerParam_Header header;
    u8 pokeID;
    u8 fIncRecordCount;
    HandlerParam_StrParams exStr;
    HandlerParam_StrParams exSubStr1;
    HandlerParam_StrParams exSubStr2;
};

struct HandlerParam_SetAnimationID
{
    HandlerParam_Header header;
    u8 animIndex;
};

struct SWAN_ALIGNED(4) HandlerParam_ConsumeItem
{
    HandlerParam_Header header;
    int fNoAction;
    HandlerParam_StrParams exStr;
};

struct SWAN_ALIGNED(4) HandlerParam_AddCondition
{
    HandlerParam_Header header;
    MoveCondition sickID;
    ConditionData sickCont;
    u8 fAlmost;
    u8 reserved;
    u8 overwriteMode;
    u8 pokeID;
    u8 OverwriteMode;
    HandlerParam_StrParams exStr;
};

struct HandlerParam_CureCondition
{
    HandlerParam_Header header;
    MoveCondition sickCode;
    u8 pokeID[12];
    u8 poke_cnt;
    u8 fStdMsgDisable;
    HandlerParam_StrParams exStr;
};

struct SWAN_ALIGNED(4) HandlerParam_Damage
{
    HandlerParam_Header header;
    u16 damage;
    u8 pokeID;
    char flags;
    u16 effectNo;
    u8 posFrom;
    u8 posTo;
    HandlerParam_StrParams exStr;
};

struct HandlerParam_ChangeAbility
{
    HandlerParam_Header header;
    u16 abilityID;
    u8 pokeID;
    u8 fSameAbilityEffective;
    u8 fSkipSwitchInEvent;
    HandlerParam_StrParams exStr;
};

struct HandlerParam_RecoverHP
{
    HandlerParam_Header header;
    u16 recoverHP;
    u8 pokeID;
    u8 fFailCheckThru;
    HandlerParam_StrParams exStr;
};

struct SWAN_ALIGNED(4) m_record
{
    u32 Turn;
    __int16 MoveID;
    u8 PokeID;
    u8 fEffective;
};

struct MoveRecord
{
    u32 ptr;
    m_record record[120];
};

struct MoveStealParam
{
    char stealCount;
    char stealPokeID[6];
    char targetPos[6];
    char targetPokeID[6];
};
struct HitCheckParam
{
    char countMax;
    char count;
    char fCheckEveryTime;
    char fMultiHitMove;
    char fPutAnimCmd;
    char MultiHitEffectiveness;
};

struct ActionOrderWork
{
    BattleMon *battleMon;
    BattleActionParam *Action;
    u32 field_8;
    char field_C;
    char fDone;
    char field_E;
    char field_F;
};

struct SWAN_ALIGNED(4) PokeSet
{
    BattleMon *battleMon[6];
    u16 damage[6];
    u16 substituteDamage[6];
    u8 damageType[6];
    u16 sortWork[6];
    u8 count;
    u8 countMax;
    u8 getIdx;
    u8 targetPosCount;
};

struct SWAN_PACKED SWAN_ALIGNED(1) calc_damage_record
{
    u8 unk0;
    u16 damage;
    u8 pokeID;
};

struct CalcDamageRecord
{
    char real_hit_count;
    char substitute_hit_count;
    char total_hit_count;
    calc_damage_record record[6];
};

struct UnityTowerVisitor
{
    wchar_t Name[10];
    int TID;
    u8 Country;
    u8 Province;
    char field_1A;
    char field_1B;
    char field_1C;
    char Sex;
    char field_1E;
    char field_1F;
    u16 PlayerTradePkm;
    unsigned __int16 VisitorTradePkm;
    unsigned __int8 Hobby;
    unsigned __int8 TradedPlacesCount;
    unsigned __int8 Flags;
    char field_27;
};

struct PokeSetStackUnit
{
    PokeSet TargetOriginal;
    PokeSet Target;
    PokeSet Ally;
    PokeSet Enemy;
    PokeSet Damaged;
    PokeSet StealTarget;
    PokeSet psetTemp;
    u64 MoveAnimCtrl;
    MoveParam moveParam;
    MoveParam MoveParamOriginal;
    HitCheckParam hitCheck;
    MoveStealParam moveStealParam;
    MoveStealParam MagicCoatParam;
    CalcDamageRecord calcDamageAlly;
    CalcDamageRecord calcDamageEnemy;
    char defaultTargetPos;
    char field_28D;
    char field_28E;
    char field_28F;
};
struct PosPokeState
{
    u8 fEnable;
    u8 clientID;
    u8 existPokeID;
};
struct PosPoke
{
    PosPokeState state[6];
    u8 lastPos[24];
};

struct EffectivenessCounter
{
    u16 NoEffectHits;
    u16 SuperEffectiveHits;
    u16 NotVeryEffectiveHits;
    u16 OpponentNoEffectHits;
    u16 OpponentSuperEffectiveHits;
    u16 OpponentNotVeryEffectiveHits;
};

const int FIRST_POS_FOR_CLIENT_ID[] = {0, 12, 6, 18};

enum FlowResult
{
    RESULT_TURN_STARTING = 0x0,
    RESULT_SWITCH = 0x1,
    RESULT_MON_FAINTED = 0x2,
    RESULT_EXP_GAINED = 0x3,
    RESULT_TEAM_FAINTED = 0x4,
    RESULT_ESCAPE = 0x5,
    RESULT_CAPTURE = 0x6,
};

struct LevelUpInfo
{
    u8 level;
    u16 hp;
    u16 atk;
    u16 def;
    u16 spa;
    u16 spd;
    u16 spe;
};
struct ClientIDRecord
{
    u8 count;
    u8 clientID[4];
};
struct HEManager
{
    u32 state;
    u8 buffer[500];
};
struct SWAN_ALIGNED(2) CalcExpWork
{
    u32 level;
    u8 isBoosted;
    u8 hp;
    u8 atk;
    u8 def;
    u8 spatk;
    u8 spdef;
    u8 spe;
};

struct SWAN_ALIGNED(8) ServerFlow
{
    BtlServerWk *server;
    MainModule *mainModule;
    PokeCon *pokeCon;
    ServerCommandQueue *serverCommandQueue;
    int turnCount;
    FlowResult flowResult;
    int heapHandle;
    MoveRecord moveRecord;
    FaintRecord faintRecord;
    int **evolutionDataPtr;
    MoveAnimCtrl *moveAnimContr;
    MoveStealParam *moveStealParam;
    MoveStealParam *magicCoatParam;
    HitCheckParam *hitCheckParam;
    EscapeInfo escapeInfo;
    // LevelUpInfo level_up_info;
    // ClientIDRecord client_id_record;
    // int rotationHandlerWork[24][7];
    // int is_simulation;
    // int stat_stage_change_count;
    // u8 command_build_step;
    // u8 action_order_step;
    // u8 turn_check_step;
    // u8 default_target_pos;
    // u16 heap_id;
    // u8 action_order_index;
    // u8 action_order_end_index;
    // u8 ball_target_pos;
    // u8 revive_count;
    // u8 escape_attempts;
    // u8 move_anim_id;
    // u8 switch_interrupt_count;
    // u8 current_fainted_mon_id;
    // u8 flags;
    // u8 SwitchOutInterruptingMonIDs[6];
    // u8 RevivedMonIDs[24];
    // u8 FaintedMonFlag[24];
    // u8 WasInBattleFlag[24];
    // u8 ClientSwitchCount[4];
    u32 field_4C0;
    u32 field_4C4;
    u32 field_4C8;
    u16 field_4CC;
    u16 field_4CE;
    u32 field_4D0;
    u8 field_4D4[672];
    u32 simulationCounter;
    u32 moveSerial;
    u8 cmdBuildStep;
    u8 field_77D;
    u8 turnCheckSeq;
    u8 defaultTargetPos;
    u16 heapID;
    u8 numActOrder;
    u8 numEndActOrder;
    u8 field_784;
    u8 revivedPokeCount;
    u8 field_786;
    u8 field_787;
    u8 field_788;
    u8 thruDeadMsgPokeID;
    u8 field_78A;
    u8 gap78B;
    u8 field_78C;
    u8 field_78D;
    u8 field_78E;
    u8 field_78F;
    u8 field_790;
    u8 revivePokeID[24];
    u8 pokeInFlag[24];
    u8 field_7C1[24];
    u8 switchCount[4];
    u8 field_7DD;
    u8 field_7DE;
    u8 field_7DF;
    ActionOrderWork actionOrderWork[6];
    ActionOrderWork TempActionOrderWork;
    PokeSet *setTargetOriginal;
    PokeSet *setTarget;
    PokeSet *setAlly;
    PokeSet *setEnemy;
    PokeSet *PokeSetDamaged;
    PokeSet *setStealTarget;
    PokeSet *PokeSetTemp;
    CalcDamageRecord *calcDamageAlly;
    CalcDamageRecord *calcDamageEnemy;
    PokeSetStackUnit pokesetUnit[7];
    u32 pokesetStackPtr;
    PokeSet switching_in_mons;
    MoveParam *moveParam;
    MoveParam *moveParamOriginal;
    PosPoke posPoke;
    HandlerParam_StrParams StrParam;
    CalcExpWork calc_exp_work[6];
    EventWorkStack event_work_stack;
    HEManager heManager;
    MoveDamageRec move_damage_record;
    u16 prev_used_move;
    ActionIgnoreReason actionIgnoreReason;
    EffectivenessCounter effectivenessCounter;
    EffectivenessRecorder effectiveness_recorder;
    u8 flowFlags[4];
    u8 temp_storage[320];
    int pokestar_result;
};

// struct ServerFlow
// {
//     BtlServerWk *server;
//     MainModule *main_module;
//     PokeCon *pokeCon;
//     ServerCommandQueue *scqueue;
//     int turn_count;
//     FlowResult flow_result;
//     int heap;
//     MoveRecord move_record;
//     FaintRecord faint_record;
//     ArcTool *evo_data;
//     MoveAnimCtrl *move_anim_ctrl;
//     MoveStealParam *move_steal_param;
//     MoveStealParam *magic_coat_param;
//     HitCheckParam *hit_check_param;
//     EscapeInfo escape_info;
//     LevelUpInfo level_up_info;
//     ClientIDRecord client_id_record;
//     int rotationHandlerWork[24][7];
//     int is_simulation;
//     int stat_stage_change_count;
//     u8 command_build_step;
//     u8 action_order_step;
//     u8 turn_check_step;
//     u8 default_target_pos;
//     u16 heap_id;
//     u8 action_order_index;
//     u8 action_order_end_index;
//     u8 ball_target_pos;
//     u8 revive_count;
//     u8 escape_attempts;
//     u8 move_anim_id;
//     u8 switch_interrupt_count;
//     u8 current_fainted_mon_id;
//     u8 flags;
//     u8 SwitchOutInterruptingMonIDs[6];
//     u8 RevivedMonIDs[24];
//     u8 FaintedMonFlag[24];
//     u8 WasInBattleFlag[24];
//     u8 ClientSwitchCount[4];
//     ActionOrderWork action_order_work[6];
//     ActionOrderWork temp_action_order_work;
//     TargetSet *original_targets;
//     TargetSet *targets;
//     TargetSet *allies;
//     TargetSet *enemies;
//     TargetSet *damaged_mons;
//     TargetSet *move_steal_targets;
//     TargetSet *temp_targets;
//     CalcDamageRecord *ally_calc_damage;
//     CalcDamageRecord *enemy_calc_damage;
//     TargetSetGroup target_sets[7];
//     int target_set_id;
//     TargetSet switching_in_mons;
//     MoveParam *move_param;
//     MoveParam *original_move_param;
//     PosPoke posPoke;
//     HandlerParam_StringSetup str;
//     CalcExpWork calc_exp_work[6];
//     EventWorkStack event_work_stack;
//     HEManager heManager;
//     MoveDamageRec move_damage_record;
//     u16 prev_used_move;
//     ActionIgnoreReason action_ignore_reason;
//     EffectivenessCounter effectiveness_counter;
//     EffectivenessRecorder effectiveness_recorder;
//     u8 flowFlags[4];
//     u8 temp_storage[320];
//     int pokestar_result;
// };

struct SWAN_ALIGNED(4) HandlerParam_Faint
{
    HandlerParam_Header header;
    u8 pokeID;
    char flags;
    char field_6;
    char field_7;
    HandlerParam_StrParams exStr;
};

struct HandlerParam_ActivateItem
{
    HandlerParam_Header header;
    u8 pokeID;
    u8 bAteKinomi;
    u16 itemID;
};

struct SWAN_ALIGNED(4) HandlerParam_RemoveSideEffect
{
    HandlerParam_Header header;
    u8 flags[3];
    u8 side;
};

struct SWAN_ALIGNED(4) HandlerParam_SetConditionFlag
{
    HandlerParam_Header header;
    ConditionFlag flag;
    u8 monID;
};

struct SWAN_ALIGNED(4) HandlerParam_SetTurnFlag
{
    HandlerParam_Header header;
    TurnFlag flag;
    u8 pokeID;
};

struct SWAN_ALIGNED(4) HandlerParam_ChangeWeather
{
    HandlerParam_Header header;
    u8 weather;
    u8 turnCount;
    u8 fAirLock;
    u8 pad;
    HandlerParam_StrParams strParam;
};

struct HandlerParam_UseHeldItem
{
    HandlerParam_Header header;
    unsigned __int32 fAllowAtFullHP : 1;
    unsigned __int32 fAllowOnFaintedMons : 1;
    unsigned __int32 pad : 30;
};

struct HandlerParam_SetItem
{
    HandlerParam_Header header;
    u16 itemID;
    u8 pokeID;
    u8 fClearConsume;
    u8 fClearConsumeOtherPoke;
    u8 clearConsumePokeID;
    u8 fCallConsumedEvent;
    HandlerParam_StrParams exStr;
};

struct HandlerParam_AddAnimation
{
    HandlerParam_Header header;
    u16 animNo;
    u8 pos_from;
    u8 pos_to;
    u16 reservedQuePos;
    u8 fQueReserve;
    u8 fMsgWinVanish;
    HandlerParam_StrParams exStr;
};

struct SWAN_ALIGNED(8) TrainerAIEnv
{
    char aiState;
    unsigned __int8 consideredMoveIndex;
    unsigned __int16 moveID;
    int scores[4];
    char field_14;
    char field_15;
    char field_16;
    char field_17;
    char field_18;
    char field_19;
    char field_1A;
    char field_1B;
    char field_1C;
    char field_1D;
    char field_1E;
    char field_1F;
    char field_20;
    char field_21;
    char field_22;
    char field_23;
    unsigned __int16 bestScoreForTarget[6];
    char bestMoveIndexForTarget[6];
    int param;
    int aiFlags;
    _DWORD aiFlagsFromTrainerData;
    char flags;
    char scriptID;
    char chosenMoveIndex;
    char chosenTarget;
    unsigned __int8 randPerMoveIndex[4];
    unsigned __int16 knownMoves[6][4];
    u8 knownAbilities[6];
    _BYTE gap82[18];
    unsigned __int8 attackerPos;
    unsigned __int8 defenderPos;
    _DWORD BattleStyle;
    _DWORD BattleType;
    __int16 HeapID;
    _DWORD ScriptsHandle;
    _DWORD ItemArcHandle;
    int scriptPtr;
    MainModule *mainModule;
    ServerFlow *serverFlow;
    PokeCon *pokeCon;
    BattleMon *attacker;
    BattleMon *defender;
    int result;
    int field_C8;
    int seededRandom;
    _QWORD time;
};

const BattleMonValue BattleMonValues[8] = {
    VALUE_ATTACK_STAGE, VALUE_DEFENSE_STAGE, VALUE_SPEED_STAGE, VALUE_SPECIAL_ATTACK_STAGE, VALUE_SPECIAL_DEFENSE_STAGE, VALUE_ACCURACY_STAGE, VALUE_EVASION_STAGE, VALUE_NULL};

//
//
//    BATTLE FIELD EXPANSION
//
//
//
// enum Terrain
// {
//     TERRAIN_NULL = 0,
//     TERRAIN_ELECTRIC = 1,
//     TERRAIN_GRASSY = 2,
//     TERRAIN_MISTY = 3,
//     TERRAIN_PSYCHIC = 4,
// };

// enum FieldEffect
// {
//     FLDEFF_WEATHER = 0x0,
//     FLDEFF_TRICK_ROOM = 0x1,
//     FLDEFF_GRAVITY = 0x2,
//     FLDEFF_IMPRISON = 0x3,
//     FLDEFF_WATER_SPORT = 0x4,
//     FLDEFF_MUD_SPORT = 0x5,
//     FLDEFF_WONDER_ROOM = 0x6,
//     FLDEFF_MAGIC_ROOM = 0x7,
// };

// enum BattleEventPriority
// {
//     EVENTPRI_MOVE_DEFAULT = 0x0,
//     EVENTPRI_POS_DEFAULT = 0x1,
//     EVENTPRI_SIDE_DEFAULT = 0x2,
//     EVENTPRI_FIELD_DEFAULT = 0x3,
//     EVENTPRI_ABILITY_POISON_TOUCH = 0x4,
//     EVENTPRI_ABILITY_DEFAULT = 0x5,
//     EVENTPRI_ITEM_DEFAULT = 0x6,
//     EVENTPRI_ABILITY_STALL = 0x7,
//     EVENTPRI_MAX = 0x8,
// };

// struct HandlerParam_RemoveFieldEffect
// {
//     HandlerParam_Header header;
//     BattleFieldEffect effect;
// };

// struct SWAN_ALIGNED(4) HandlerParam_AddFieldEffect
// {
//     HandlerParam_Header header;
//     BattleFieldEffect effect;
//     ConditionData cont;
//     u8 fAddDependPoke;
//     char field_D;
//     char field_E;
//     char field_F;
//     HandlerParam_StrParams exStr;
// };

// struct BattleSideCondition
// {
//     BattleEventItem *BattleEventItem;
//     ConditionData conditionData;
//     int TurnCounter;
//     int Count;
// };

// struct BattleSideStatus
// {
//     BattleSideCondition Conditions[14];
// };

// struct BattleSideManager
// {
//     BattleSideStatus Sides[2];
// };

// // struct FIELD_TRIGGERTABLE
// // {
// //     BattleEventType triggerValue;
// //     FIELD_HANDLER_FUNC function;
// // };

// typedef void (*BattleEventHandler)(BattleEventItem *item, ServerFlow *ServerFlow, int pokemonID, int *work);
// typedef BattleEventHandlerTableEntry *(*FieldEffectEventAddFunc)(int *);

// struct BattleEventHandlerTableEntry
// {
//     BattleEventType EventType;
//     BattleEventHandler Handler;
// };

// struct FieldEffectEventAddTable
// {
//     FieldEffect effect;
//     FieldEffectEventAddFunc func;
// };

// struct BattleSideCondition
// {
//     BattleEventItem* BattleEventItem;
//     ConditionData conditionData;
//     int TurnCounter;
//     int Count;
// };

// enum SideEffect
// {
//     SIDEEFF_REFLECT = 0x0,
//     SIDEEFF_LIGHT_SCREEN = 0x1,
//     SIDEEFF_SAFEGUARD = 0x2,
//     SIDEEFF_MIST = 0x3,
//     SIDEEFF_TAILWIND = 0x4,
//     SIDEEFF_LUCKY_CHANT = 0x5,
//     SIDEEFF_SPIKES = 0x6,
//     SIDEEFF_TOXIC_SPIKES = 0x7,
//     SIDEEFF_STEALTH_ROCK = 0x8,
//     SIDEEFF_WIDE_GUARD = 0x9,
//     SIDEEFF_QUICK_GUARD = 0xA,
//     SIDEEFF_RAINBOW = 0xB,
//     SIDEEFF_SEA_OF_FIRE = 0xC,
//     SIDEEFF_SWAMP = 0xD,
// };

// typedef BattleEventHandlerTableEntry* (*SideEffectEventAddFunc)(int*);

// struct SideEffectEventAddTable
// {
//     // actual data-type -> enum SideEffect
//     int sideEffect;
//     SideEffectEventAddFunc func;
//     int maxCount;
// };

// struct HandlerParam_AddSideEffect
// {
//     HandlerParam_Header header;
//     SideEffect effect;
//     ConditionData cont;
//     u8 side;
//     HandlerParam_StrParams exStr;
// };

//
// TYPE CHARTS
//
const int FreezeDryTypeChart[18][18] = {{4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4}, {8, 4, 2, 2, 4, 8, 2, 0, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2}, {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4}, {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8}, {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4}, {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4}, {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2}, {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4}, {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8}, {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4}, {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4}, {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4}, {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4}, {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 0, 4}, {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 8, 8, 4, 4, 2, 8, 4, 4}, {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0}, {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2}, {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int SkyUppercutTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 8, 2, 4, 8, 2, 0, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 0, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int CorrosionTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 2, 2, 4, 8, 2, 0, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 8, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 0, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int StrongJawMoves[10] = {
    MOVE044_BITE, MOVE158_HYPER_FANG, MOVE162_SUPER_FANG, MOVE170_SNAP_TRAP, MOVE265_PSYCHIC_FANGS, MOVE305_POISON_FANG, MOVE422_THUNDER_FANG, MOVE423_ICE_FANG, MOVE424_FIRE_FANG, MOVE242_CRUNCH};

const int HyperCutterMoves[27] = {
    MOVE421_SHADOW_CLAW, MOVE533_SACRED_SWORD, MOVE534_RAZOR_SHELL, MOVE530_DUAL_CHOP, MOVE529_DRILL_RUN, MOVE554_SOLAR_BLADE,
    MOVE440_CROSS_POISON, MOVE427_PSYCHO_CUT, MOVE404_X_SCISSOR, MOVE400_NIGHT_SLASH, MOVE403_AIR_SLASH, MOVE384_PSYBLADE,
    MOVE348_LEAF_BLADE, MOVE337_DRAGON_CLAW, MOVE332_AERIAL_ACE, MOVE314_AIR_CUTTER, MOVE306_CRUSH_CLAW, MOVE232_METAL_CLAW,
    MOVE163_SLASH, MOVE154_FURY_SWIPES, MOVE065_DRILL_PECK, MOVE013_RAZOR_WINDS, MOVE010_SCRATCH, MOVE210_FURY_CUTTER, MOVE015_CUT,
    MOVE075_RAZOR_LEAF, MOVE548_SECRET_SWORD};

const int WindMoves[17] = {
    MOVE403_AIR_SLASH,
    MOVE542_HURRICANE,
    MOVE257_HEAT_WAVE,
    MOVE466_OMINOUS_WIND,
    MOVE318_SILVER_WIND,
    MOVE016_GUST,
    MOVE059_BLIZZARD,
    MOVE379_PETAL_BLIZZARD,
    MOVE511_FAIRY_WIND,
    MOVE180_DIAMOND_STORM,
    MOVE013_RAZOR_WINDS,
    MOVE177_AEROBLAST,
    MOVE196_ICY_WIND,
    MOVE366_TAILWIND,
    MOVE239_TWISTER,
    MOVE018_WHIRLWIND,
    MOVE314_AIR_CUTTER};

const int BulletproofMoves[21] = {
    MOVE491_ACID_SPRAY,
    MOVE396_AURA_SPHERE,
    MOVE140_BARRAGE,
    MOVE331_BULLET_SEED,
    MOVE121_EGG_BOMB,
    MOVE486_ELECTRO_BALL,
    MOVE412_ENERGY_BALL,
    MOVE411_FOCUS_BLAST,
    MOVE360_GYRO_BALL,
    MOVE301_BOOMBURST,
    MOVE443_MAGNET_BOMB,
    MOVE426_MUD_BOMB,
    MOVE190_OCTAZOOKA,
    MOVE461_POLLEN_PUFF,
    MOVE350_ROCK_BLAST,
    MOVE439_ROCK_WRECKER,
    MOVE402_SEED_BOMB,
    MOVE247_SHADOW_BALL,
    MOVE188_SLUDGE_BOMB,
    MOVE311_WEATHER_BALL,
    MOVE192_ZAP_CANNON};

const int FLAIL_POWER_TABLE[6] = {
    0xC80001, 0x960004, 0x640009, 0x500010, 0x280020, 0x140030};

const int normalTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 2, 2, 4, 8, 2, 0, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 0, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int SacredSwordTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 2, 2, 4, 8, 2, 4, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int chargestoneTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 2, 2, 4, 8, 2, 0, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 2, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 0, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int opelucidTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 2, 2, 4, 8, 2, 2, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {0, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 0, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 2},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

const int celestialTypeChart[18][18] = {
    {4, 4, 4, 4, 4, 2, 4, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {8, 4, 2, 2, 4, 8, 2, 0, 8, 4, 4, 4, 4, 2, 8, 4, 8, 2},
    {4, 8, 4, 4, 4, 2, 8, 4, 2, 4, 4, 8, 2, 4, 4, 4, 4, 4},
    {4, 4, 4, 2, 2, 2, 4, 2, 0, 4, 4, 8, 4, 4, 4, 4, 4, 8},
    {4, 4, 0, 8, 4, 8, 2, 4, 8, 8, 4, 2, 8, 4, 4, 4, 4, 4},
    {4, 2, 8, 4, 2, 4, 8, 4, 2, 8, 4, 4, 4, 4, 8, 4, 4, 4},
    {4, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 8, 4, 8, 4, 4, 8, 2},
    {2, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 4},
    {4, 4, 4, 4, 4, 8, 4, 4, 2, 2, 2, 4, 2, 4, 8, 4, 4, 8},
    {4, 4, 4, 4, 4, 2, 8, 4, 8, 2, 2, 8, 4, 4, 8, 2, 4, 4},
    {4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 2, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 2, 2, 8, 8, 2, 4, 2, 2, 8, 2, 4, 4, 4, 2, 4, 4},
    {4, 4, 8, 4, 0, 4, 4, 4, 4, 4, 8, 2, 2, 4, 4, 2, 4, 4},
    {4, 8, 4, 8, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 2, 4},
    {4, 4, 8, 4, 8, 4, 4, 4, 2, 2, 2, 8, 4, 4, 2, 8, 4, 4},
    {4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 4, 0},
    {4, 2, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 8, 4, 4, 2, 2},
    {4, 8, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 8, 8, 4}};

unsigned __int16 MOLD_BREAKER_AFFECTED_ABILITIES[46] = {
    ABIL025_WONDER_GUARD,
    ABIL043_AMPLIFIER,
    ABIL026_LEVITATE,
    ABIL008_SAND_VEIL,
    ABIL081_SNOW_CLOAK,
    ABIL011_WATER_ABSORB,
    ABIL004_BATTLE_ARMOR,
    ABIL031_LIGHTNING_ROD,
    ABIL114_STORM_DRAIN,
    ABIL075_SHELL_ARMOR,
    ABIL109_UNAWARE,
    ABIL021_WELL_BAKED_BODY,
    ABIL086_SIMPLE,
    ABIL077_SLUSH_RUSH,
    ABIL116_SOLID_ROCK,
    ABIL111_FILTER,
    ABIL018_FLASH_FIRE,
    ABIL078_MOTOR_DRIVE,
    ABIL063_MARVEL_SCALE,
    ABIL047_THICK_FAT,
    ABIL085_HEATPROOF,
    ABIL073_WHITE_SMOKE,
    ABIL029_STRONG_BODY,
    ABIL051_WIND_RIDER,
    ABIL052_HYPER_CUTTER,
    ABIL039_INNER_FOCUS,
    ABIL019_RESILIENT,
    ABIL005_STURDY,
    ABIL006_BULLETPROOF,
    ABIL102_FUR_COAT,
    ABIL015_THUNDER_ARMOR,
    ABIL072_VITAL_SPIRIT,
    ABIL017_FLUFFY,
    ABIL126_CONTRARY,
    ABIL132_FRIEND_GUARD,
    ABIL136_MAJESTIC_WARD,
    ABIL140_PERMAFROST,
    ABIL147_WONDER_SKIN,
    ABIL156_MAGIC_BOUNCE,
    ABIL157_SAP_SIPPER,
    ABIL010_VOLT_ABSORB,
    ABIL087_DRY_SKIN,
    ABIL122_FLOWER_GIFT,
    ABIL134_HEAVY_METAL,
    ABIL135_LIGHT_METAL,
    ABIL080_COLOSSAL};
// struct SaveControl
// {
//     u8 Status;
//     u8 SaveDataAlreadyPresent;
//     u8 byte2;
//     u8 field_3[9];
//     u32 field_C;
//     char *SaveData;
//     u32 SaveExtra[21];
//     u32 dword68;
// };

// struct PlayerState
// {
//     u16 ZoneID;
//     char VecPos;
//     char RailPos;
//     char RotationAngle;
//     u8 field_1A;
//     u8 IsPosRail;
//     u16 NowOBJCODE;
//     __int16 field_1E;
//     int field_20;
//     int field_24;
//     int field_28;
//     int field_2C;
//     int field_30;
//     int field_34;
//     int field_38;
//     int field_3C;
//     char ExState;
// };

// struct ZoneSpawnInfo
// {
//     u32 ChangeType;
//     u16 ZoneID;
//     u16 WarpID;
//     u16 WarpDir;
//     u16 PosWeightBits;
//     b32 IsRail;
//     char Pos;
// };

// struct GameData
// {
//     SaveControl *m_SaveControl;
//     u8 field_4[272];
//     PlayerState m_PlayerState;
//     char *m_EventData;
//     char *m_PlayerSaveData;
//     ZoneSpawnInfo *NowZoneSpawnInfo;
//     ZoneSpawnInfo *WarpRememberZoneInfo;
//     ZoneSpawnInfo *NextSpawnZone;
//     ZoneSpawnInfo *EscapeRopeZone;
//     ZoneSpawnInfo EntralinkParentSpawnInfo;
//     void *m_MyItemSave;
//     char *m_Bag;
//     char *m_Party;
//     void *dword198;
//     char *m_BoxSaveAccessor;
//     void *dword1A0;
//     char *m_BGMInfo;
//     char *m_ActorSystem;
//     char *m_EventWork;
//     char *m_MapMatrix;
//     char *m_FieldSoundSystem;
//     BattleFieldStatus *m_FieldStatus;
//     char LastBattleResult;
//     u8 PauseEvents;
//     char field_1C1;
//     u8 field_1C2;
//     char field_1C3;
//     u32 TotalStepsTaken;
//     u8 NaturalSeason;
//     u8 NowWeather;
//     u8 LastFieldSubscreen;
//     u8 byte1CB;
//     u8 byte1CC;
//     char byte1CD;
//     u8 SkipFrameCounter;
//     u8 Is30FPSMode;
//     u16 field_1D0;
//     u8 ForceSeasonSync;
//     char field_1D3;
//     char field_1D4[76];
//     char *m_EncountState;
//     char char224;
//     char gap225[3];
//     char m_GimmickState;
// };
